<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<doc>
  <members>
    <assembly>
      <name>UnityEngine.Networking</name>
    </assembly>
    <member name="T:UnityEngine.Networking.ChannelOption">
      <summary>
        <para>An enumeration of the options that can be set on a network channel.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ChannelOption.MaxPendingBuffers">
      <summary>
        <para>The option to set the numbet of pending buffers for a channel.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.Channels">
      <summary>
        <para>Class containing constants for default network channels.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultReliable">
      <summary>
        <para>The id of the default reliable channel used by the UNet HLAPI, This channel is used for state updates and spawning.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.Channels.DefaultUnreliable">
      <summary>
        <para>The id of the default unreliable channel used for the UNet HLAPI. This channel is used for movement updates.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on clients, but not generate warnings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientRpcAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on clients from a server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientRpcAttribute.channel">
      <summary>
        <para>The channel ID which this RPC transmission will use.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ClientScene">
      <summary>
        <para>A client manager which contains non-instance centrict client information and functions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.localPlayers">
      <summary>
        <para>A list of all players added to the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.prefabs">
      <summary>
        <para>This is a dictionary of the prefabs that are registered on the client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.ready">
      <summary>
        <para>Returns true when a client's connection has been set to ready.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.readyConnection">
      <summary>
        <para>The NetworkConnection object that is currently "ready". This is the connection being used connect to the server where objects are spawned from.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.reconnectId">
      <summary>
        <para>The reconnectId to use when a client reconnects to the new host of a game after the old host was lost.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.ClientScene.spawnableObjects">
      <summary>
        <para>This is dictionary of the disabled NetworkIdentity objects in the scene that could be spawned by messages from the server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This adds a player object for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer will be called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <param name="extraMessage">An extra message object that can be passed to the server for this player.</param>
      <returns>
        <para>True if player was added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This adds a player object for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer will be called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <param name="extraMessage">An extra message object that can be passed to the server for this player.</param>
      <returns>
        <para>True if player was added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.AddPlayer(System.Int16)">
      <summary>
        <para>This adds a player object for this client. This causes an AddPlayer message to be sent to the server, and NetworkManager.OnServerAddPlayer will be called. If an extra message was passed to AddPlayer, then OnServerAddPlayer will be called with a NetworkReader that contains the contents of the message.</para>
      </summary>
      <param name="readyConn">The connection to become ready for this client.</param>
      <param name="playerControllerId">The local player ID number.</param>
      <param name="extraMessage">An extra message object that can be passed to the server for this player.</param>
      <returns>
        <para>True if player was added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ClearSpawners">
      <summary>
        <para>This clears the registered spawn prefabs and spawn handler functions for this client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.ConnectLocalServer">
      <summary>
        <para>Create and connect a local client instance to the local server.</para>
      </summary>
      <returns>
        <para>A client object for communicating with the local server.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.DestroyAllClientObjects">
      <summary>
        <para>Destroys all networked objects on the client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.FindLocalObject">
      <summary>
        <para>This finds the local NetworkIdentity object with the specified network Id.</para>
      </summary>
      <param name="netId">The id of a networked object.</param>
      <returns>
        <para>The game object that matches the netId.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.Ready(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Signal that the client connection is ready to enter the game.</para>
      </summary>
      <param name="conn">The client connection which is ready.</param>
    </member>
    <member name="F:UnityEngine.Networking.ClientScene.ReconnectIdHost">
      <summary>
        <para>A constant ID used by the old host when it reconnects to the new host.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.ClientScene.ReconnectIdInvalid">
      <summary>
        <para>An invalid reconnect Id.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
      <param name="newAssetId">An assetId to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
      <param name="newAssetId">An assetId to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterPrefab(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128)">
      <summary>
        <para>Registers a prefab with the UNET spawning system.</para>
      </summary>
      <param name="prefab">A Prefab that will be spawned.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
      <param name="newAssetId">An assetId to be assigned to this prefab. This allows a dynamically created game object to be registered for an already known asset Id.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RegisterSpawnHandler(UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.SpawnDelegate,UnityEngine.Networking.UnSpawnDelegate)">
      <summary>
        <para>This is an advanced spawning funciotn that registers a custom assetId with the UNET spawning system.</para>
      </summary>
      <param name="assetId">Custom assetId string.</param>
      <param name="spawnHandler">A method to use as a custom spawnhandler on clients.</param>
      <param name="unspawnHandler">A method to use as a custom un-spawnhandler on clients.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.RemovePlayer(System.Int16)">
      <summary>
        <para>Remove the specified player ID from the game.</para>
      </summary>
      <param name="id">The local player ID number	.</param>
      <param name="playerControllerId"></param>
      <returns>
        <para>Returns true if the player was successfully destoyed and removed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SetLocalObject">
      <summary>
        <para>NetId is a unique number assigned to all objects with NetworkIdentity components in a game.</para>
      </summary>
      <param name="netId">NetId of object.</param>
      <param name="obj">Networked object.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.SetReconnectId(System.Int32,UnityEngine.Networking.NetworkSystem.PeerInfoMessage[])">
      <summary>
        <para>Sets the Id that the ClientScene will use when reconnecting to a new host after host migration.</para>
      </summary>
      <param name="newReconnectId">The Id to use when reconnecting to a game.</param>
      <param name="peers">The set of known peers in the game. This may be null.</param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterPrefab(UnityEngine.GameObject)">
      <summary>
        <para>Removes a registered spawn prefab.</para>
      </summary>
      <param name="prefab"></param>
    </member>
    <member name="M:UnityEngine.Networking.ClientScene.UnregisterSpawnHandler(UnityEngine.Networking.NetworkHash128)">
      <summary>
        <para>Removes a registered spawn handler function.</para>
      </summary>
      <param name="assetId"></param>
    </member>
    <member name="T:UnityEngine.Networking.CommandAttribute">
      <summary>
        <para>This is an attribute that can be put on methods of NetworkBehaviour classes to allow them to be invoked on the server by sending a command from a client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.CommandAttribute.channel">
      <summary>
        <para>The QoS channel to use to send this command on, see Networking.QosType.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter">
      <summary>
        <para>FilterLog is a utility class that controls the level of logging generated by UNET clients and servers.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.current">
      <summary>
        <para>The current logging level that UNET is running with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.currentLogLevel">
      <summary>
        <para>The current logging level that UNET is running with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logDebug">
      <summary>
        <para>Checks if debug logging is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logError">
      <summary>
        <para>Checks if error logging is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logInfo">
      <summary>
        <para>Checks if info level logging is enabled.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.LogFilter.logWarn">
      <summary>
        <para>Checks if wanring level logging is enabled.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Debug">
      <summary>
        <para>Setting LogFilter.currentLogLevel to this will enable verbose debug logging.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Error">
      <summary>
        <para>Setting LogFilter.currentLogLevel to this will error and above messages.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.LogFilter.FilterLevel">
      <summary>
        <para>Control how verbose the network log messages are.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Debug">
      <summary>
        <para>Show log messages with priority Debug and higher.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Developer">
      <summary>
        <para>Show log messages with priority Developer and higher, this it the most verbose setting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Error">
      <summary>
        <para>Show log messages with priority Error and higher.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Fatal">
      <summary>
        <para>Show log messages with priority Fatal and higher. this is the least verbose setting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Info">
      <summary>
        <para>Show log messages with priority Info and higher. This is the default setting.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.FilterLevel.Warn">
      <summary>
        <para>Show log messages with priority Warning and higher.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Info">
      <summary>
        <para>Setting LogFilter.currentLogLevel to this will log only info and above messages. This is the default level.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.LogFilter.Warn">
      <summary>
        <para>Setting LogFilter.currentLogLevel to this will log wanring and above messages.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.MessageBase">
      <summary>
        <para>Network message classes should be derived from this class. These message classes can then be sent using the various Send functions of NetworkConnection, NetworkClient and NetworkServer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Deserialize(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used to populate a message object from a NetworkReader stream.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
    </member>
    <member name="M:UnityEngine.Networking.MessageBase.Serialize(UnityEngine.Networking.NetworkWriter)">
      <summary>
        <para>The method is used to populate a NetworkWriter stream from a message object.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
    </member>
    <member name="T:UnityEngine.Networking.MsgType">
      <summary>
        <para>Container class for networking system built-in message types.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AddPlayer">
      <summary>
        <para>Internal networking system message for adding player objects to client instances.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Animation">
      <summary>
        <para>Internal networking system message for sending synchronizing animation state.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationParameters">
      <summary>
        <para>Internal networking system message for sending synchronizing animation parameter state.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.AnimationTrigger">
      <summary>
        <para>Internal networking system message for sending animation triggers.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Command">
      <summary>
        <para>Internal networking system message for sending a command from client to server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Connect">
      <summary>
        <para>Internal networking system message for communicating a connection has occurred.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.CRC">
      <summary>
        <para>Internal networking system message for HLAPI CRC checking.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Disconnect">
      <summary>
        <para>Internal networking system message for communicating a disconnect has occurred,.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Error">
      <summary>
        <para>Internal networking system message for communicating an error.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Highest">
      <summary>
        <para>The highest value of built-in networking system message ids. User messages must be above this value.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.InternalHighest">
      <summary>
        <para>The highest value of internal networking system message ids. User messages must be above this value. User code cannot replace these handlers.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyAddPlayerFailed">
      <summary>
        <para>Internal networking system message for communicating failing to add lobby player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReadyToBegin">
      <summary>
        <para>Internal networking system message for communicating a player is ready in the lobby.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbyReturnToLobby">
      <summary>
        <para>Internal networking system messages used to return the game to the lobby scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LobbySceneLoaded">
      <summary>
        <para>Internal networking system message for communicating a lobby player has loaded the game scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalChildTransform">
      <summary>
        <para>Internal networking system message for sending tranforms for client object from client to server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalClientAuthority">
      <summary>
        <para>Internal networking system message for setting authority to a client for an object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.LocalPlayerTransform">
      <summary>
        <para>Internal networking system message for sending tranforms from client to server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.MsgType.MsgTypeToString(System.Int16)">
      <summary>
        <para>Returns the name of internal message types by their id.</para>
      </summary>
      <param name="value">A internal message id value.</param>
      <returns>
        <para>The name of the internal message.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NetworkInfo">
      <summary>
        <para>Internal networking system message for sending information about network peers to clients.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.NotReady">
      <summary>
        <para>Internal networking system message for server to tell clients they are no longer ready.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectDestroy">
      <summary>
        <para>Internal networking system message for destroying objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectHide">
      <summary>
        <para>Internal networking system message for hiding objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawn">
      <summary>
        <para>Internal networking system message for spawning objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ObjectSpawnScene">
      <summary>
        <para>Internal networking system message for spawning scene objects.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Owner">
      <summary>
        <para>Internal networking system message for telling clients they own a player object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.PeerClientAuthority">
      <summary>
        <para>Internal networking system message for sending information about changes in authority for non-player objects to clients.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Ready">
      <summary>
        <para>Internal networking system message for clients to tell server they are ready.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.ReconnectPlayer">
      <summary>
        <para>Internal networking system message used when a client connects to the new host of a game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.RemovePlayer">
      <summary>
        <para>Internal networking system message for removing a player object which was spawned for a client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Rpc">
      <summary>
        <para>Internal networking system message for sending a ClientRPC from server to client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.Scene">
      <summary>
        <para>Internal networking system message that tells clients which scene to load when they connect to a server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SpawnFinished">
      <summary>
        <para>Internal networking system messages used to tell when the initial contents of a scene is being spawned.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncEvent">
      <summary>
        <para>Internal networking system message for sending a SyncEvent from server to client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.SyncList">
      <summary>
        <para>Internal networking system message for sending a USyncList generic list.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.MsgType.UpdateVars">
      <summary>
        <para>Internal networking system message for updating SyncVars on a client from a server.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkAnimator">
      <summary>
        <para>A component to synchronize Mecanim animation states for networked objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkAnimator.animator">
      <summary>
        <para>The animator component to synchronize.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.GetParameterAutoSend(System.Int32)">
      <summary>
        <para>Gets whether an animation parameter should be auto sent.</para>
      </summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <returns>
        <para>True if the parameter should be sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetParameterAutoSend(System.Int32,System.Boolean)">
      <summary>
        <para>Sets whether an animation parameter should be auto sent.</para>
      </summary>
      <param name="index">Index of the parameter in the Animator.</param>
      <param name="value">The new value.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.String)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
      </summary>
      <param name="name">Name of trigger.</param>
      <param name="hash">Hash id of trigger (from the Animator).</param>
      <param name="triggerName"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkAnimator.SetTrigger(System.Int32)">
      <summary>
        <para>Causes an animation trigger to be invoked for a networked object.</para>
      </summary>
      <param name="name">Name of trigger.</param>
      <param name="hash">Hash id of trigger (from the Animator).</param>
      <param name="triggerName"></param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBehaviour">
      <summary>
        <para>Base class which should be inherited by scripts which contain networking functionality.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToClient">
      <summary>
        <para>The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.connectionToServer">
      <summary>
        <para>The NetworkConnection associated with this NetworkIdentity. This is only valid for player objects on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isClient">
      <summary>
        <para>Returns true if running as a client and this object was spawned by a server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.isServer">
      <summary>
        <para>Returns true if this object is active on an active server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.localPlayerAuthority">
      <summary>
        <para>This value is set on the NetworkIdentity and is accessible here for convenient access for scripts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.netId">
      <summary>
        <para>The unique network Id of this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkBehaviour.playerControllerId">
      <summary>
        <para>The id of the player associated with thei behaviour.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.ClearAllDirtyBits">
      <summary>
        <para>This clears all the dirty bits that were set on this script by SetDirtyBits();</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBehaviour.CmdDelegate">
      <summary>
        <para>Delegate for Command functions.</para>
      </summary>
      <param name="obj"></param>
      <param name="reader"></param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBehaviour.EventDelegate">
      <summary>
        <para>Delegate for Event functions.</para>
      </summary>
      <param name="targets"></param>
      <param name="reader"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkChannel">
      <summary>
        <para>This virtual function is used to specify the QoS channel to use for SyncVar updates for this script.</para>
      </summary>
      <returns>
        <para>The QoS channel for this script.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.GetNetworkSendInterval">
      <summary>
        <para>This virtual function is used to specify the send interval to use for SyncVar updates for this script.</para>
      </summary>
      <returns>
        <para>The time in seconds between updates.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeCommand(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>Manually invoke a Command.</para>
      </summary>
      <param name="cmdHash">Hash of the Command name.</param>
      <param name="reader">Parameters to pass to the command.</param>
      <returns>
        <para>Returns true if successful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeRPC(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>Manually invoke an RPC function.</para>
      </summary>
      <param name="cmdHash">Hash of the RPC name.</param>
      <param name="reader">Parameters to pass to the RPC function.</param>
      <returns>
        <para>Returns true if successful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.InvokeSyncEvent(System.Int32,UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>Manually invoke a SyncEvent.</para>
      </summary>
      <param name="cmdHash">Hash of the SyncEvent name.</param>
      <param name="reader">Parameters to pass to the SyncEvent.</param>
      <returns>
        <para>Returns true if successful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnCheckObserver(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Callback used by the visibility system to determine if an observer (player) can see this object.</para>
      </summary>
      <param name="conn">Network connection of a player.</param>
      <returns>
        <para>True if the player can see this object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnDeserialize(UnityEngine.Networking.NetworkReader,System.Boolean)">
      <summary>
        <para>Virtual function to override to receive custom serialization data.</para>
      </summary>
      <param name="reader">Reader to read from the stream.</param>
      <param name="initialState">True if being sent initial state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnNetworkDestroy">
      <summary>
        <para>This is invoked on clients when the server has caused this object to be destroyed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnRebuildObservers(System.Collections.Generic.HashSet`1&lt;UnityEngine.Networking.NetworkConnection&gt;,System.Boolean)">
      <summary>
        <para>Callback used by the visibility system to (re)construct the set of observers that can see this object.</para>
      </summary>
      <param name="observers">The new set of observers for this object.</param>
      <param name="initialize">True if the set of observers is being built for the first time.</param>
      <returns>
        <para>Return true if this function did work.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSerialize(UnityEngine.Networking.NetworkWriter,System.Boolean)">
      <summary>
        <para>Virtual function to override to send custom serialization data.</para>
      </summary>
      <param name="writer">Writer to use to write to the stream.</param>
      <param name="initialState">If this is being called to send initial state.</param>
      <returns>
        <para>True if data was written.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnSetLocalVisibility(System.Boolean)">
      <summary>
        <para>Callback used by the visibility system for objects on a host.</para>
      </summary>
      <param name="vis">New visibility state.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartAuthority">
      <summary>
        <para>This is invoked on behaviours that have authority, based on context and the LocalPlayerAuthority value on the NetworkIdentity.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartClient">
      <summary>
        <para>Called on every NetworkBehaviour when it is activated on a client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartLocalPlayer">
      <summary>
        <para>Called when the local player object has been set up.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStartServer">
      <summary>
        <para>Called when the server starts listening.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.OnStopAuthority">
      <summary>
        <para>This is invoked on behaviours when authority is removed.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.PreStartClient">
      <summary>
        <para>An internal method called on client objects to resolve GameObject references.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkBehaviour.SetDirtyBit(System.UInt32)">
      <summary>
        <para>Used to set the behaviour as dirty, so that a network update will be sent for the object.</para>
      </summary>
      <param name="dirtyBit">Bit mask to set.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkBroadcastResult">
      <summary>
        <para>A structure that contains data from a NetworkDiscovery server broadcast.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.broadcastData">
      <summary>
        <para>The data broadcast by the server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkBroadcastResult.serverAddress">
      <summary>
        <para>The IP address of the server that broadcasts this data.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkClient">
      <summary>
        <para>High level UNET client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.active">
      <summary>
        <para>True if a network client is currently active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.allClients">
      <summary>
        <para>A list of all the active network clients in the current process.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.connection">
      <summary>
        <para>The NetworkConnection object this client is using.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.handlers">
      <summary>
        <para>The registered network message handlers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.hostTopology">
      <summary>
        <para>The host topology that this client is using.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.isConnected">
      <summary>
        <para>This gives the current connection status of the client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.networkConnectionClass">
      <summary>
        <para>The class to use when creating new NetworkConnections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.numChannels">
      <summary>
        <para>The number of QoS channels currently configured for this client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.peers">
      <summary>
        <para>The other network participants in the current game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverIp">
      <summary>
        <para>The IP address of the server that this client is connected to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkClient.serverPort">
      <summary>
        <para>The port of the server that this client is connected to.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
      </summary>
      <param name="config">Transport layer configuration object.</param>
      <param name="maxConnections">The maximum number of connections to allow.</param>
      <param name="topology">Transport layer topology object.</param>
      <returns>
        <para>True if the configuration was successful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Configure(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This configures the transport layer settings for a client.</para>
      </summary>
      <param name="config">Transport layer configuration object.</param>
      <param name="maxConnections">The maximum number of connections to allow.</param>
      <param name="topology">Transport layer topology object.</param>
      <returns>
        <para>True if the configuration was successful.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Connect(System.String,System.Int32)">
      <summary>
        <para>Connect client to a NetworkServer instance.</para>
      </summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ConnectWithSimulator(System.String,System.Int32,System.Int32,System.Single)">
      <summary>
        <para>Connect client to a NetworkServer instance with simulated latency and packet loss.</para>
      </summary>
      <param name="serverIp">Target IP address or hostname.</param>
      <param name="serverPort">Target port number.</param>
      <param name="latency">Simulated latency in milliseconds.</param>
      <param name="packetLoss">Simulated packet loss percentage.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.#ctor">
      <summary>
        <para>Creates a new NetworkClient instance.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Disconnect">
      <summary>
        <para>Disconnect from server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetConnectionStats">
      <summary>
        <para>Retrieves statistics about the network packets sent on this connection.</para>
      </summary>
      <returns>
        <para>Dictionary of packet statistics for the client's connection.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetRTT">
      <summary>
        <para>Gets the Return Trip Time for this connection.</para>
      </summary>
      <returns>
        <para>Return trip time in milliseconds.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsIn(System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get inbound network statistics for the client.</para>
      </summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetStatsOut(System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get outbound network statistics for the client.</para>
      </summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.GetTotalConnectionStats">
      <summary>
        <para>Retrieves statistics about the network packets sent on all connections.</para>
      </summary>
      <returns>
        <para>Dictionary of stats.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ReconnectToNewHost(System.String,System.Int32)">
      <summary>
        <para>This is used by a client that has lost the connection to the old host, to reconnect to the new host of a game.</para>
      </summary>
      <param name="serverIp">The IP address of the new host.</param>
      <param name="serverPort">The port of the new host.</param>
      <returns>
        <para>True if able to reconnect.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ResetConnectionStats">
      <summary>
        <para>Resets the statistics return by NetworkClient.GetConnectionStats() to zero values.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server. This message is sent on channel zero, which by default is the reliable channel.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">A message instance to send.</param>
      <returns>
        <para>True if message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>This sends a network message with a message Id to the server on a specific channel.</para>
      </summary>
      <param name="msgType">The id of the message to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The channel to send the message on.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends the data in an array of bytes to the server that the client is connected to.</para>
      </summary>
      <param name="data">Data to send.</param>
      <param name="numBytes">Number of bytes of data.</param>
      <param name="channelId">The QoS channel to send data on.</param>
      <returns>
        <para>True if successfully sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message Id to the server on channel one, which by default is the unreliable channel.</para>
      </summary>
      <param name="msgType">The message id to send.</param>
      <param name="msg">The message to send.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of the NetworkWriter's buffer to the connected server on the specified channel.</para>
      </summary>
      <param name="writer">Writer object containing data to send.</param>
      <param name="channelId">QoS channel to send data on.</param>
      <returns>
        <para>True if data successfully sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetMaxDelay(System.Single)">
      <summary>
        <para>Set the maximum amount of time that can pass for transmitting the send buffer.</para>
      </summary>
      <param name="seconds">Delay in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.Shutdown">
      <summary>
        <para>Shut down a client.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.ShutdownAll">
      <summary>
        <para>Shuts down all network clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkClient.UnregisterHandler(System.Int16)">
      <summary>
        <para>Unregisters a network message handler.</para>
      </summary>
      <param name="msgType">The message type to unregister.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkConnection">
      <summary>
        <para>High level network connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.address">
      <summary>
        <para>The IP address associated with the connection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.clientOwnedObjects">
      <summary>
        <para>A list of the NetworkIdentity objects owned by this connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.connectionId">
      <summary>
        <para>Unique identifier for this connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.hostId">
      <summary>
        <para>Transport level host ID for this connection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.isConnected">
      <summary>
        <para>True if the connection is connected to a remote end-point.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.isReady">
      <summary>
        <para>Flag that tells if the connection has been marked as "ready" by a client calling ClientScene.Ready().</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.lastMessageTime">
      <summary>
        <para>The last time that a message was received on this connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.logNetworkMessages">
      <summary>
        <para>Setting this to true will log the contents of network message to the console.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkConnection.playerControllers">
      <summary>
        <para>The list of players for this connection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.CheckHandler(System.Int16)">
      <summary>
        <para>This function checks if there is a message handler registered for the message ID.</para>
      </summary>
      <param name="msgType">The message ID of the handler to look for.</param>
      <returns>
        <para>True if a handler function was found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Disconnect">
      <summary>
        <para>Disconnects this connection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Dispose">
      <summary>
        <para>Disposes of this connection, releasing channel buffers that it holds.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.FlushChannels">
      <summary>
        <para>This causes the channels of the network connection to flush their data to the transport layer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsIn(System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get statistics for incoming traffic.</para>
      </summary>
      <param name="numMsgs">Number of messages received.</param>
      <param name="numBytes">Number of bytes received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.GetStatsOut(System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get statistics for outgoing traffic.</para>
      </summary>
      <param name="numMsgs">Number of messages sent.</param>
      <param name="numBufferedMsgs">Number of messages currently buffered for sending.</param>
      <param name="numBytes">Number of bytes sent.</param>
      <param name="lastBufferedPerSecond">How many messages were buffered in the last second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.HandleBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This makes the connection process the data contained in the buffer, and call handler functions.</para>
      </summary>
      <param name="buffer">Data to process.</param>
      <param name="receivedSize">Size of the data to process.</param>
      <param name="channelId">Channel the data was recieved on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.HandleReader(UnityEngine.Networking.NetworkReader,System.Int32,System.Int32)">
      <summary>
        <para>This makes the connection process the data contained in the stream, and call handler functions.</para>
      </summary>
      <param name="reader">Stream that contains data.</param>
      <param name="receivedSize">Size of the data.</param>
      <param name="channelId">Channel the data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Initialize(System.String,System.Int32,System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This inializes the internal data structures of a NetworkConnection object, including channel buffers.</para>
      </summary>
      <param name="address">The host or IP connected to.</param>
      <param name="hostId">The transport hostId for the connection.</param>
      <param name="connectionId">The transport connectionId for the connection.</param>
      <param name="hostTopology">The topology to be used.</param>
      <param name="networkAddress"></param>
      <param name="networkHostId"></param>
      <param name="networkConnectionId"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(System.Int16,UnityEngine.Networking.NetworkReader,System.Int32)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
      </summary>
      <param name="msgType">The message type of the handler to use.</param>
      <param name="reader">The stream to read the contents of the message from.</param>
      <param name="channelId">The channel that the message arrived on.</param>
      <param name="netMsg">The message object to process.</param>
      <returns>
        <para>True if a handler function was found and invoked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandler(UnityEngine.Networking.NetworkMessage)">
      <summary>
        <para>This function invokes the registered handler function for a message.</para>
      </summary>
      <param name="msgType">The message type of the handler to use.</param>
      <param name="reader">The stream to read the contents of the message from.</param>
      <param name="channelId">The channel that the message arrived on.</param>
      <param name="netMsg">The message object to process.</param>
      <returns>
        <para>True if a handler function was found and invoked.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.InvokeHandlerNoData(System.Int16)">
      <summary>
        <para>This function invokes the registered handler function for a message, without any message data.</para>
      </summary>
      <param name="msgType">The message ID of the handler to invoke.</param>
      <returns>
        <para>True if a handler function was found and invoked.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkConnection.PacketStat">
      <summary>
        <para>Structure used to track the number and size of packets of each packets type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.PacketStat.bytes">
      <summary>
        <para>Total bytes of all messages of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.PacketStat.count">
      <summary>
        <para>The total number of messages of this type.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkConnection.PacketStat.msgType">
      <summary>
        <para>The message type these stats are for.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>This registers a handler function for a message Id.</para>
      </summary>
      <param name="msgType">The message ID to register.</param>
      <param name="handler">The handler function to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ResetStats">
      <summary>
        <para>Resets the statistics that are returned from NetworkClient.GetConnectionStats().</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.Send(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message ID on the connection. This message is sent on channel zero, which by default is the reliable channel.</para>
      </summary>
      <param name="msgType">The ID of the message to send.</param>
      <param name="msg">The message to send.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendByChannel(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>This sends a network message on the connection using a specific transport layer channel.</para>
      </summary>
      <param name="msgType">The message ID to send.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendBytes(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes on the connection.</para>
      </summary>
      <param name="bytes">The array of data to be sent.</param>
      <param name="numBytes">The number of bytes in the array to be sent.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>
        <para>Success if data was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendUnreliable(System.Int16,UnityEngine.Networking.MessageBase)">
      <summary>
        <para>This sends a network message with a message ID on the connection. This message is sent on channel one, which by default is the unreliable channel.</para>
      </summary>
      <param name="msgType">The message ID to send.</param>
      <param name="msg">The message to send.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SendWriter(UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of a NetworkWriter object on the connection.</para>
      </summary>
      <param name="writer">A writer object containing data to send.</param>
      <param name="channelId">The transport channel to send on.</param>
      <returns>
        <para>True if the data was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetChannelOption(System.Int32,UnityEngine.Networking.ChannelOption,System.Int32)">
      <summary>
        <para>This sets an option on the network channel.</para>
      </summary>
      <param name="channelId">The channel the option will be set on.</param>
      <param name="option">The option to set.</param>
      <param name="value">The value for the option.</param>
      <returns>
        <para>True if the option was set.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.SetMaxDelay(System.Single)">
      <summary>
        <para>The maximum time in seconds that messages are buffered before being sent.</para>
      </summary>
      <param name="seconds">Time in seconds.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.ToString">
      <summary>
        <para>Returns a string representation of the NetworkConnection object state.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportRecieve(System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data from the network before it is passed to the application.</para>
      </summary>
      <param name="bytes">The data recieved.</param>
      <param name="numBytes">The size of the data recieved.</param>
      <param name="channelId">The channel that the data was received on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.TransportSend(System.Byte[],System.Int32,System.Int32,System.Byte&amp;)">
      <summary>
        <para>This virtual function allows custom network connection classes to process data send by the application before it goes to the network transport layer.</para>
      </summary>
      <param name="bytes">Data to send.</param>
      <param name="numBytes">Size of data to send.</param>
      <param name="channelId">Channel to send data on.</param>
      <param name="error">Error code for send.</param>
      <returns>
        <para>True if data was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkConnection.UnregisterHandler(System.Int16)">
      <summary>
        <para>This removes the handler registered for a message Id.</para>
      </summary>
      <param name="msgType">The message ID to unregister.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkCRC">
      <summary>
        <para>This class holds information about which networked scripts use which QoS channels for updates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scriptCRCCheck">
      <summary>
        <para>Enables a CRC check between server and client that ensures the NetworkBehaviour scripts match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkCRC.scripts">
      <summary>
        <para>A dictionary of script QoS channels.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.RegisterBehaviour(System.String,System.Int32)">
      <summary>
        <para>This is used to setup script network settings CRC data.</para>
      </summary>
      <param name="name">Script name.</param>
      <param name="channel">QoS Channel.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkCRC.ReinitializeScriptCRCs">
      <summary>
        <para>This can be used to reinitialize the set of script CRCs.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkDiscovery">
      <summary>
        <para>The NetworkDiscovery component allows Unity games to find each other on a local network. It can broadcast presence and listen for broadcasts, and optionally join matching games using the NetworkManager.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastData">
      <summary>
        <para>The data to include in the broadcast message when running as a server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastInterval">
      <summary>
        <para>How often in milliseconds to broadcast when running as a server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastKey">
      <summary>
        <para>A key to identify this application in broadcasts.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastPort">
      <summary>
        <para>The network port to broadcast on and listen to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastsReceived">
      <summary>
        <para>A dictionary of broadcasts received from servers.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastSubVersion">
      <summary>
        <para>The sub-version of the application to broadcast. This is used to match versions of the same application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.broadcastVersion">
      <summary>
        <para>The version of the application to broadcast. This is used to match versions of the same application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.hostId">
      <summary>
        <para>The TransportLayer hostId being used (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isClient">
      <summary>
        <para>True if running in client mode (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.isServer">
      <summary>
        <para>True if running in server mode (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetX">
      <summary>
        <para>The horizontal offset of the GUI if active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.offsetY">
      <summary>
        <para>The vertical offset of the GUI if active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.running">
      <summary>
        <para>True is broadcasting or listening (read-only).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.showGUI">
      <summary>
        <para>True to draw the default Broacast control UI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkDiscovery.useNetworkManager">
      <summary>
        <para>True to integrate with the NetworkManager.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.Initialize">
      <summary>
        <para>Initializes the NetworkDiscovery component.</para>
      </summary>
      <returns>
        <para>Return true if the network port was available.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.OnReceivedBroadcast(System.String,System.String)">
      <summary>
        <para>This is a virtual function that can be implemented to handle broadcast messages when running as a client.</para>
      </summary>
      <param name="fromAddress">The IP address of the server.</param>
      <param name="data">The data broadcast by the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsClient">
      <summary>
        <para>Starts listening for broadcasts messages.</para>
      </summary>
      <returns>
        <para>True is able to listen.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StartAsServer">
      <summary>
        <para>Starts sending broadcast messages.</para>
      </summary>
      <returns>
        <para>True is able to broadcast.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkDiscovery.StopBroadcast">
      <summary>
        <para>Stops listening and broadcasting.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkHash128">
      <summary>
        <para>A 128 bit number used to represent assets in a networking context.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.IsValid">
      <summary>
        <para>A valid NetworkHash has a non-zero value.</para>
      </summary>
      <returns>
        <para>True if the value is non-zero.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Parse(System.String)">
      <summary>
        <para>This parses the string representation of a NetworkHash into a binary object.</para>
      </summary>
      <param name="text">A hex string to parse.</param>
      <returns>
        <para>A 128 bit network hash object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.Reset">
      <summary>
        <para>Resets the value of a NetworkHash to zero (invalid).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkHash128.ToString">
      <summary>
        <para>Returns a string representation of a NetworkHash object.</para>
      </summary>
      <returns>
        <para>A hex asset string.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkIdentity">
      <summary>
        <para>A component used to add an object to the UNET networking system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.assetId">
      <summary>
        <para>Unique identifier used to find the source assets when server spawns the on clients.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkIdentity.clientAuthorityCallback">
      <summary>
        <para>A callback that can be populated to be notified when the client-authority state of objects changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.clientAuthorityOwner">
      <summary>
        <para>The client that has authority for this object. This will be null if no client has authority.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToClient">
      <summary>
        <para>The UConnection associated with this NetworkIdentity. This is only valid for player objects on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.connectionToServer">
      <summary>
        <para>The UConnection associated with this NetworkIdentity. This is only valid for player objects on a local client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.hasAuthority">
      <summary>
        <para>This returns true if this object is the authoritative version of the object in the distributed network application.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isClient">
      <summary>
        <para>Returns true if running as a client and this object was spawned by a server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isLocalPlayer">
      <summary>
        <para>This returns true if this object is the one that represents the player on the local machine.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.isServer">
      <summary>
        <para>Returns true if running as a server, which spawned the object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.localPlayerAuthority">
      <summary>
        <para>LocalPlayerAuthority means that the client of the "owning" player has authority over their own player object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.netId">
      <summary>
        <para>Unique identifier for this particular object instance, used for tracking objects between networked clients and the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.observers">
      <summary>
        <para>The set of network connections (players) that can see this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.playerControllerId">
      <summary>
        <para>The id of the player associated with this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.sceneId">
      <summary>
        <para>A unique identifier for NetworkIdentity objects within a scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkIdentity.serverOnly">
      <summary>
        <para>Flag to make this object only exist when the game is running as a server (or host).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.AssignClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This assigns control of an object to a client via the client's NetworkConnection.</para>
      </summary>
      <param name="conn">The connection of the client to assign authority to.</param>
      <returns>
        <para>True if authority was assigned.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkIdentity.ClientAuthorityCallback">
      <summary>
        <para>The delegate type for the clientAuthorityCallback.</para>
      </summary>
      <param name="conn">The network connection that is gaining or losing authority.</param>
      <param name="uv">The object whose client authority status is being changed.</param>
      <param name="authorityState">The new state of client authority of the object for the connection.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.ForceSceneId(System.Int32)">
      <summary>
        <para>Force the scene ID to a specific value.</para>
      </summary>
      <param name="sceneId">The new scene ID.</param>
      <param name="newSceneId"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RebuildObservers(System.Boolean)">
      <summary>
        <para>This causes the set of players that can see this object to be rebuild. The OnRebuildObservers callback function will be invoked on each NetworkBehaviour.</para>
      </summary>
      <param name="initialize">True if this is the first time.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkIdentity.RemoveClientAuthority(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Removes ownership for an object for a client by its conneciton.</para>
      </summary>
      <param name="conn">The connection of the client to remove authority for.</param>
      <returns>
        <para>True if authority is removed.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkInstanceId">
      <summary>
        <para>This is used to identify networked objects across all participants of a network. It is assigned at runtime by the server when an object is spawned.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkInstanceId.Invalid">
      <summary>
        <para>A static invalid NetworkInstanceId that can be used for comparisons.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.IsEmpty">
      <summary>
        <para>Returns true if the value of the NetworkInstanceId is zero.</para>
      </summary>
      <returns>
        <para>True if zero.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkInstanceId.ToString">
      <summary>
        <para>Returns a string of "NetID:value".</para>
      </summary>
      <returns>
        <para>String representation of this object.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkInstanceId.Value">
      <summary>
        <para>The internal value of this identifier.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyManager">
      <summary>
        <para>This is a specialized NetworkManager that includes a networked lobby.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.gamePlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the PlayScene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyPlayerPrefab">
      <summary>
        <para>This is the prefab of the player to be created in the LobbyScene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.lobbyScene">
      <summary>
        <para>The scene to use for the lobby. This is similar to the offlineScene of the NetworkManager.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyManager.lobbySlots">
      <summary>
        <para>These slots track players that enter the lobby.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayers">
      <summary>
        <para>The maximum number of players allowed in the game.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.maxPlayersPerConnection">
      <summary>
        <para>The maximum number of players per connection.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.minPlayers">
      <summary>
        <para>The minimum number of players required to be ready for the game to start.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.playScene">
      <summary>
        <para>The scene to use for the playing the game from the lobby. This is similar to the onlineScene of the NetworkManager.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyManager.showLobbyGUI">
      <summary>
        <para>This flag enables display of the default lobby UI.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.CheckReadyToBegin">
      <summary>
        <para>CheckReadyToBegin checks all of the players in the lobby to see if their readyToBegin flag is set.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientAddPlayerFailed">
      <summary>
        <para>Called on the client when adding a player to the lobby fails.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This is called on the client when it connects to server.</para>
      </summary>
      <param name="conn">The connection that connected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This is called on the client when disconnected from a server.</para>
      </summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientEnter">
      <summary>
        <para>This is a hook to allow custom behaviour when the game client enters the lobby.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientExit">
      <summary>
        <para>This is a hook to allow custom behaviour when the game client exits the lobby.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This is called on the client when the client is finished loading a new networked scene.</para>
      </summary>
      <param name="conn"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This is called on the server when a new client connects to the server.</para>
      </summary>
      <param name="conn">The new connection.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateGamePlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the GamePlayer object on the server.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player on the connnection.</param>
      <returns>
        <para>A new GamePlayer object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerCreateLobbyPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This allows customization of the creation of the lobby-player object on the server.</para>
      </summary>
      <param name="conn">The connection the player object is for.</param>
      <param name="playerControllerId">The controllerId of the player.</param>
      <returns>
        <para>The new lobby-player object.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This is called on the server when a client disconnects.</para>
      </summary>
      <param name="conn">The connection that disconnected.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayerRemoved(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>This is called on the server when a player is removed.</para>
      </summary>
      <param name="conn"></param>
      <param name="playerControllerId"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerPlayersReady">
      <summary>
        <para>This is called on the server when all the players in the lobby are ready.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneChanged(System.String)">
      <summary>
        <para>This is called on the server when a networked scene finishes loading.</para>
      </summary>
      <param name="sceneName">Name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyServerSceneLoadedForPlayer(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This is called on the server when it is told that a client has finished switching from the lobby scene to a game player scene.</para>
      </summary>
      <param name="lobbyPlayer">The lobby player object.</param>
      <param name="gamePlayer">The game player object.</param>
      <returns>
        <para>False to not allow this player to replace the lobby player.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This is called on the client when a client is started.</para>
      </summary>
      <param name="lobbyClient"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartHost">
      <summary>
        <para>This is called on the host when a host is started.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStartServer">
      <summary>
        <para>This is called on the server when the server is started - including when a host is started.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopClient">
      <summary>
        <para>This is called on the client when the client stops.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.OnLobbyStopHost">
      <summary>
        <para>This is called on the host when the host is stopped.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.SendReturnToLobby">
      <summary>
        <para>Sends a message to the server to make the game return to the lobby scene.</para>
      </summary>
      <returns>
        <para>True if message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.ServerReturnToLobby">
      <summary>
        <para>Calling this causes the server to switch back to the lobby scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyManager.TryToAddPlayer">
      <summary>
        <para>This is used on clients to attempt to add a player to the game.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkLobbyPlayer">
      <summary>
        <para>This component works in conjunction with the NetworkLobbyManager to make up the multiplayer lobby system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.readyToBegin">
      <summary>
        <para>This is a flag that control whether this player is ready for the game to begin.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkLobbyPlayer.slot">
      <summary>
        <para>The slot within the lobby that this player inhabits.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientEnterLobby">
      <summary>
        <para>This is a hook that is invoked on all player objects when entering the lobby.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.OnClientExitLobby">
      <summary>
        <para>This is a hook that is invoked on all player objects when exiting the lobby.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.RemovePlayer">
      <summary>
        <para>This removes this player from the lobby.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendNotReadyToBeginMessage">
      <summary>
        <para>This is used on clients to tell the server that this player is not ready for the game to begin.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendReadyToBeginMessage">
      <summary>
        <para>This is used on clients to tell the server that this player is ready for the game to begin.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkLobbyPlayer.SendSceneLoadedMessage">
      <summary>
        <para>This is used on clients to tell the server that the client has switched from the lobby to the GameScene and is ready to play.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkLobbyPlayer.ShowLobbyGUI">
      <summary>
        <para>This flag controls whether the default UI is shown for the lobby player.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManager">
      <summary>
        <para>The NetworkManager is a convenience class for the HLAPI for managing networking systems.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.autoCreatePlayer">
      <summary>
        <para>A flag to control whether or not player objects are automatically created on connect, and on scene change.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.channels">
      <summary>
        <para>The Quality-of-Service channels to use for the network transport layer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.client">
      <summary>
        <para>The current NetworkClient being used by the manager.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.connectionConfig">
      <summary>
        <para>The custom network configuration to use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.customConfig">
      <summary>
        <para>Flag to enable custom network configuration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.dontDestroyOnLoad">
      <summary>
        <para>A flag to control whether the NetworkManager object is destroyed when the scene changes.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.globalConfig">
      <summary>
        <para>The transport layer global configuration to be used.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.isNetworkActive">
      <summary>
        <para>True if the NetworkServer or NetworkClient isactive.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.logLevel">
      <summary>
        <para>The log level specifically to user for network log messages.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matches">
      <summary>
        <para>The list of matches that are available to join.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchHost">
      <summary>
        <para>The hostname of the matchmaking server.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchInfo">
      <summary>
        <para>A MatchInfo instance that will be used when StartServer() or StartClient() are called.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchMaker">
      <summary>
        <para>The UMatch matchmaker object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchName">
      <summary>
        <para>The name of the current match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.matchPort">
      <summary>
        <para>The port of the matchmaking service.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.matchSize">
      <summary>
        <para>The maximum number of players in the current match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxConnections">
      <summary>
        <para>The maximum number of concurrent network connections to support.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.migrationManager">
      <summary>
        <para>The migration manager being used with the NetworkManager.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkAddress">
      <summary>
        <para>The network address currently in use.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.networkPort">
      <summary>
        <para>The network port currently in use.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.networkSceneName">
      <summary>
        <para>The name of the current network scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.numPlayers">
      <summary>
        <para>NumPlayers is the number of active player objects across all connections on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.offlineScene">
      <summary>
        <para>The scene to switch to when offline.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.onlineScene">
      <summary>
        <para>The scene to switch to when online.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.packetLossPercentage">
      <summary>
        <para>The percentage of incoming and outgoing packets to be dropped for clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerPrefab">
      <summary>
        <para>The default prefab to be used to create player objects on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.playerSpawnMethod">
      <summary>
        <para>The current method of spawning players used by the NetworkManager.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.runInBackground">
      <summary>
        <para>Controls whether the program runs when it is in the background.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.scriptCRCCheck">
      <summary>
        <para>Flag for using the script CRC check between server and clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.secureTunnelEndpoint">
      <summary>
        <para>Allows you to specify an EndPoint object instead of setting networkAddress and networkPort (required for some platforms such as Xbox One).</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.sendPeerInfo">
      <summary>
        <para>A flag to control sending the network information about every peer to all members of a match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindAddress">
      <summary>
        <para>The IP address to bind the server to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.serverBindToIP">
      <summary>
        <para>Flag to tell the server whether to bind to a specific IP address.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.simulatedLatency">
      <summary>
        <para>The delay in milliseconds to be added to incoming and outgoing packets for clients.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManager.singleton">
      <summary>
        <para>The NetworkManager singleton object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.spawnPrefabs">
      <summary>
        <para>List of prefabs that will be registered with the spawning system.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.startPositions">
      <summary>
        <para>The list of currently registered player start positions for the current scene.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useSimulator">
      <summary>
        <para>Flag that control whether clients started by this NetworkManager will use simulated latency and packet loss.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkManager.useWebSockets">
      <summary>
        <para>This makes the NetworkServer listen for WebSockets connections instead of normal transport layer connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.GetStartPosition">
      <summary>
        <para>This finds a spawn position based on NetworkStartPosition objects in the scene.</para>
      </summary>
      <returns>
        <para>Returns the transform to spawn a player at, or null.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.IsClientConnected">
      <summary>
        <para>This checks if the NetworkManager has a client and that it is connected to a server.</para>
      </summary>
      <returns>
        <para>True if the NetworkManagers client is connected to a server.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the client when connected to a server.</para>
      </summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when disconnected from a server.</para>
      </summary>
      <param name="conn">Connection to the server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>
        <para>Called on clients when a network error occurs.</para>
      </summary>
      <param name="conn">Connection to a server.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a servers tells the client it is no longer ready.</para>
      </summary>
      <param name="conn">Connection to a server.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnClientSceneChanged(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on clients when a scene has completed loaded, when the scene load was initiated by the server.</para>
      </summary>
      <param name="conn">The network connection that the scene change message arrived on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchCreate(UnityEngine.Networking.Match.CreateMatchResponse)">
      <summary>
        <para>This is invoked when a match has been created.</para>
      </summary>
      <param name="matchInfo">Info about the match that has been created.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchJoined(UnityEngine.Networking.Match.JoinMatchResponse)">
      <summary>
        <para>This is invoked when a match is joined.</para>
      </summary>
      <param name="matchInfo"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnMatchList(UnityEngine.Networking.Match.ListMatchResponse)">
      <summary>
        <para>This is invoked when a list of matches is returned from ListMatches().</para>
      </summary>
      <param name="matchList">A list of available matches.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerAddPlayer(UnityEngine.Networking.NetworkConnection,System.Int16)">
      <summary>
        <para>Called on the server when a client adds a new player with ClientScene.AddPlayer.</para>
      </summary>
      <param name="conn">Connection from client.</param>
      <param name="playerControllerId">Id of the new player.</param>
      <param name="extraMessageReader">An extra message object passed for the new player.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerConnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the server when a new client connects.</para>
      </summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerDisconnect(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the server when a client disconnects.</para>
      </summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerError(UnityEngine.Networking.NetworkConnection,System.Int32)">
      <summary>
        <para>Called on the server when a network error occurs for a client connection.</para>
      </summary>
      <param name="conn">Connection from client.</param>
      <param name="errorCode">Error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Called on the server when a client is ready.</para>
      </summary>
      <param name="conn">Connection from client.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerRemovePlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.Networking.PlayerController)">
      <summary>
        <para>Called on the server when a client removes a player.</para>
      </summary>
      <param name="conn">The connection to remove the player from.</param>
      <param name="player">The player controller to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnServerSceneChanged(System.String)">
      <summary>
        <para>Called on the server when a scene is completed loaded, when the scene load was initiated by the server with ServerChangeScene().</para>
      </summary>
      <param name="sceneName">The name of the new scene.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This is a hook that is invoked when the client is started.</para>
      </summary>
      <param name="client">The NetworkClient object that was started.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartHost">
      <summary>
        <para>This hook is invoked when a host is started.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStartServer">
      <summary>
        <para>This hook is invoked when a server is started - including when a host is started.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopClient">
      <summary>
        <para>This hook is called when a client is stopped.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopHost">
      <summary>
        <para>This hook is called when a host is stopped.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.OnStopServer">
      <summary>
        <para>This hook is called when a server is stopped - including when a host is stopped.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.RegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Registers the transform of a game object as a player spawn location.</para>
      </summary>
      <param name="start">Transform to register.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.ServerChangeScene(System.String)">
      <summary>
        <para>This causes the server to switch scenes and sets the networkSceneName.</para>
      </summary>
      <param name="newSceneName">The name of the scene to change to. The server will change scene immediately, and a message will be sent to connected clients to ask them to change scene also.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetMatchHost(System.String,System.Int32,System.Boolean)">
      <summary>
        <para>This set the address of the matchmaker service.</para>
      </summary>
      <param name="newHost">Hostname of matchmaker service.</param>
      <param name="port">Port of matchmaker service.</param>
      <param name="https">Protocol used by matchmaker service.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.SetupMigrationManager(UnityEngine.Networking.NetworkMigrationManager)">
      <summary>
        <para>This sets up a NetworkMigrationManager object to work with this NetworkManager.</para>
      </summary>
      <param name="man">The migration manager object to use with the NetworkManager.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.Shutdown">
      <summary>
        <para>Shuts down the NetworkManager completely and destroy the singleton.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartClient">
      <summary>
        <para>This starts a network client. It uses the networkAddress and networkPort properties as the address to connect to.</para>
      </summary>
      <returns>
        <para>The client object created.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartHost">
      <summary>
        <para>This starts a network "host" - a server and client in the same application.</para>
      </summary>
      <returns>
        <para>The client object created - this is a "local client".</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartMatchMaker">
      <summary>
        <para>This starts matchmaker for the NetworkManager.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StartServer">
      <summary>
        <para>This starts a new server.</para>
      </summary>
      <returns>
        <para>True is the server was started.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopClient">
      <summary>
        <para>Stops the client that the manager is using.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopHost">
      <summary>
        <para>This stops both the client and the server that the manager is using.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopMatchMaker">
      <summary>
        <para>Stops the matchmaker that the NetworkManager is using.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.StopServer">
      <summary>
        <para>Stops the server that the manager is using.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UnRegisterStartPosition(UnityEngine.Transform)">
      <summary>
        <para>Unregisters the transform of a game object as a player spawn location.</para>
      </summary>
      <param name="start"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkManager.UseExternalClient(UnityEngine.Networking.NetworkClient)">
      <summary>
        <para>This allows the NetworkManager to use a client object created externally to the NetworkManager instead of using StartClient().</para>
      </summary>
      <param name="externalClient">The NetworkClient object to use.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkManagerHUD">
      <summary>
        <para>An extension for the NetworkManager that displays a default HUD for controlling the network state of the game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.manager">
      <summary>
        <para>The NetworkManager associated with this HUD.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetX">
      <summary>
        <para>The horizontal offset in pixels to draw the HUD runtime GUI at.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.offsetY">
      <summary>
        <para>The vertical offset in pixels to draw the HUD runtime GUI at.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkManagerHUD.showGUI">
      <summary>
        <para>Whether to show the default control HUD at runtime.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessage">
      <summary>
        <para>The details of a network message received by a client or server on a network connection.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.channelId">
      <summary>
        <para>The transport layer channel the message was sent on.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.conn">
      <summary>
        <para>The connection the message was recieved on.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.msgType">
      <summary>
        <para>The id of the message type of the message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.reader">
      <summary>
        <para>A NetworkReader object that contains the contents of the message.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMessage.Dump(System.Byte[],System.Int32)">
      <summary>
        <para>Returns a string with the numeric representation of each byte in the payload.</para>
      </summary>
      <param name="payload">Network message payload to dump.</param>
      <param name="sz">Length of payload in bytes.</param>
      <returns>
        <para>Dumped info from payload.</para>
      </returns>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMessage.MaxMessageSize">
      <summary>
        <para>The size of the largest message in bytes that can be sent on a NetworkConnection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMessage.ReadMessage">
      <summary>
        <para>ReadMessage is used to extract a typed network message from the NetworkReader of a NetworkMessage object.</para>
      </summary>
      <returns>
        <para>The type of the Network Message, must be derived from MessageBase.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMessageDelegate">
      <summary>
        <para>The callback delegate used in message handler functions.</para>
      </summary>
      <param name="netMsg">Network message for the message callback.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager">
      <summary>
        <para>A component that manages the process of a new host taking over a game when the old host is lost. This is referred to as "host migration". The migration manager sends information about each peer in the game to all the clients, and when the host is lost because of a crash or network outage, the clients are able to choose a new host, and continue the game.

The old host is able to rejoin the new game on the new host.

The state of SyncVars and SyncLists on all objects with NetworkIdentities in the scene is maintained during a host migration. This also applies to custom serialized data for objects.

All of the player objects in the game are disabled when the host is lost. Then, when the other clients rejoin the new game on the new host, the corresponding players for those clients are re-enabled on the host, and respawned on the other clients. No player state data is lost during a host migration.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.client">
      <summary>
        <para>The client instance that is being used to connect to the host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.disconnectedFromHost">
      <summary>
        <para>True is this is a client that has been disconnected from a host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.hostMigration">
      <summary>
        <para>Controls whether host migration is active.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.hostWasShutdown">
      <summary>
        <para>True if this was the host and the host has been shut down.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.matchInfo">
      <summary>
        <para>Information about the match. This may be null if there is no match.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.newHostAddress">
      <summary>
        <para>The IP address of the new host to connect to.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.offsetX">
      <summary>
        <para>The X offset in pixels of the migration manager default GUI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.offsetY">
      <summary>
        <para>The Y offset in pixels of the migration manager default GUI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.oldServerConnectionId">
      <summary>
        <para>The connectionId that this client was assign on the old host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.peers">
      <summary>
        <para>The set of peers involved in the game. This includes the host and this client.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.pendingPlayers">
      <summary>
        <para>The player objects that have been disabled, and are waiting for their corresponding clients to reconnect.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.showGUI">
      <summary>
        <para>Flag to toggle display of the default UI.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.waitingReconnectToNewHost">
      <summary>
        <para>True if this is a client that was disconnected from the host and is now waiting to reconnect to the new host.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkMigrationManager.waitingToBecomeNewHost">
      <summary>
        <para>True if this is a client that was disconnected from the host, and was chosen as the new host.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.BecomeNewHost(System.Int32)">
      <summary>
        <para>This causes a client that has been disconnected from the host to become the new host of the game.</para>
      </summary>
      <param name="port">The network port to listen on.</param>
      <returns>
        <para>True if able to become the new host.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers">
      <summary>
        <para>The player objects for connections to the old host.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.ConnectionPendingPlayers.players">
      <summary>
        <para>The list of players for a connection.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.DisablePlayerObjects">
      <summary>
        <para>This causes objects for known players to be disabled.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.FindNewHost(UnityEngine.Networking.NetworkSystem.PeerInfoMessage&amp;,System.Boolean&amp;)">
      <summary>
        <para>This is a utility function to pick one of the peers in the game as the new host.</para>
      </summary>
      <param name="newHostInfo">Information about the new host, including the IP address.</param>
      <param name="youAreNewHost">True if this client is to be the new host.</param>
      <returns>
        <para>True if able to pick a new host.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.Initialize(UnityEngine.Networking.NetworkClient,UnityEngine.Networking.Match.MatchInfo)">
      <summary>
        <para>Used to initialize the migration manager with client and match information.</para>
      </summary>
      <param name="newClient">The NetworkClient being used to connect to the host.</param>
      <param name="newMatchInfo">Information about the match being used. This may be null if there is no match.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.LostHostOnClient(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This should be called on a client when it has lost its connection to the host.</para>
      </summary>
      <param name="conn">The connection of the client that was connected to the host.</param>
      <returns>
        <para>True if the client should stay in the on-line scene.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.LostHostOnHost">
      <summary>
        <para>This should be called on a host when it has has been shutdown.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnAuthorityUpdated(UnityEngine.GameObject,System.Int32,System.Boolean)">
      <summary>
        <para>A virtual function that is called when the authority of a non-player object changes.</para>
      </summary>
      <param name="go">The game object whose authority has changed.</param>
      <param name="connectionId">The id of the connection whose authority changed for this object.</param>
      <param name="authorityState">The new authority state for the object.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnClientDisconnectedFromHost(UnityEngine.Networking.NetworkConnection,UnityEngine.Networking.NetworkMigrationManager/SceneChangeOption&amp;)">
      <summary>
        <para>A virtual function that is called when the client is disconnected from the host.</para>
      </summary>
      <param name="conn">The connection to the old host.</param>
      <param name="sceneChange">How to handle scene changes.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnPeersUpdated(UnityEngine.Networking.NetworkSystem.PeerListMessage)">
      <summary>
        <para>A virtual function that is called when the set of peers in the game changes.</para>
      </summary>
      <param name="peers">The set of peers in the game.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerHostShutdown">
      <summary>
        <para>A virtual function that is called when the host is shutdown.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectObject(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>A virtual function that is called for non-player objects with client authority on the new host when a client from the old host reconnects to the new host.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldObject">The object with authority that is being reconnected.</param>
      <param name="oldConnectionId">The connectionId of this client on the old host.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16)">
      <summary>
        <para>A virtual function that is called on the new host when a client from the old host reconnects to the new host.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object associated with this client.</param>
      <param name="oldConnectionId">The connectionId of this client on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is re-joining.</param>
      <param name="extraMessageReader">Additional message data (optional).</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.OnServerReconnectPlayer(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16,UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>A virtual function that is called on the new host when a client from the old host reconnects to the new host.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object associated with this client.</param>
      <param name="oldConnectionId">The connectionId of this client on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is re-joining.</param>
      <param name="extraMessageReader">Additional message data (optional).</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo">
      <summary>
        <para>Information about a player object from another peer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.netId">
      <summary>
        <para>The networkId of the player object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.obj">
      <summary>
        <para>The gameObject for the player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.PendingPlayerInfo.playerControllerId">
      <summary>
        <para>The playerControllerId of the player object.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.ReconnectObjectForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32)">
      <summary>
        <para>This re-establishes a non-player object with client authority with a client that is reconnected.  It is similar to NetworkServer.SpawnWithClientAuthority().</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldObject">The object with client authority that is being reconnected.</param>
      <param name="oldConnectionId">This client's connectionId on the old host.</param>
      <returns>
        <para>True if the object was reconnected.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.ReconnectPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int32,System.Int16)">
      <summary>
        <para>This re-establishes a player object with a client that is reconnected.  It is similar to NetworkServer.AddPlayerForConnection(). The player game object will become the player object for the new connection.</para>
      </summary>
      <param name="newConnection">The connection of the new client.</param>
      <param name="oldPlayer">The player object.</param>
      <param name="oldConnectionId">This client's connectionId on the old host.</param>
      <param name="playerControllerId">The playerControllerId of the player that is rejoining.</param>
      <returns>
        <para>True if able to re-add this player.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.Reset(System.Int32)">
      <summary>
        <para>Resets the migration manager, and sets the ClientScene's ReconnectId.</para>
      </summary>
      <param name="reconnectId">The connectionId for the ClientScene to use when reconnecting.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption">
      <summary>
        <para>An enumeration of how to handle scene changes when the connection to the host is lost.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.StayInOnlineScene">
      <summary>
        <para>The client should stay in the online scene.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkMigrationManager.SceneChangeOption.SwitchToOfflineScene">
      <summary>
        <para>The client should return to the offline scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkMigrationManager.SendPeerInfo">
      <summary>
        <para>This sends the set of peers in the game to all the peers in the game.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker">
      <summary>
        <para>Component that controls visibility of networked objects for players.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.checkMethod">
      <summary>
        <para>Which method to use for checking proximity of players.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.forceHidden">
      <summary>
        <para>Flag to force this object to be hidden for players.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visRange">
      <summary>
        <para>The maximim range that objects will be visible at.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.visUpdateInterval">
      <summary>
        <para>How often (in seconds) that this object should update the set of players that can see it.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkProximityChecker.CheckMethod">
      <summary>
        <para>Enumeration of methods to use to check proximity.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics2D">
      <summary>
        <para>Use 2D physics to determine proximity.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkProximityChecker.CheckMethod.Physics3D">
      <summary>
        <para>Use 3D physics to determine proximity.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkReader">
      <summary>
        <para>General purpose serializer for UNET (for reading byte arrays).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.#ctor">
      <summary>
        <para>Creates a new NetworkReader object.</para>
      </summary>
      <param name="buffer">A buffer to construct the reader with, this buffer is NOT copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.#ctor(System.Byte[])">
      <summary>
        <para>Creates a new NetworkReader object.</para>
      </summary>
      <param name="buffer">A buffer to construct the reader with, this buffer is NOT copied.</param>
    </member>
    <member name="P:UnityEngine.Networking.NetworkReader.Position">
      <summary>
        <para>The current position within the buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBoolean">
      <summary>
        <para>Reads a boolean from the stream.</para>
      </summary>
      <returns>
        <para>The value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadByte">
      <summary>
        <para>Reads a byte from the stream.</para>
      </summary>
      <returns>
        <para>The value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytes(System.Int32)">
      <summary>
        <para>Reads a number of bytes from the stream.</para>
      </summary>
      <param name="count">Number of bytes to read.</param>
      <returns>
        <para>Bytes read. (this is a copy).</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadBytesAndSize">
      <summary>
        <para>This read a 16-bit byte count and a array of bytes of that size from the stream.</para>
      </summary>
      <returns>
        <para>The bytes read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadChar">
      <summary>
        <para>Reads a char from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor">
      <summary>
        <para>Reads a unity Color objects.</para>
      </summary>
      <returns>
        <para>The color read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadColor32">
      <summary>
        <para>Reads a unity color32 objects.</para>
      </summary>
      <returns>
        <para>The colo read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadDouble">
      <summary>
        <para>Reads a double from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadGameObject">
      <summary>
        <para>Reads a reference to a GameObject from the stream.</para>
      </summary>
      <returns>
        <para>The GameObject referenced.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt16">
      <summary>
        <para>Reads a signed 16 bit integer from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt32">
      <summary>
        <para>Reads a signed 32bit integer from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadInt64">
      <summary>
        <para>Reads a signed 64 bit integer from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadMatrix4x4">
      <summary>
        <para>Reads a unity Matrix4x4 object.</para>
      </summary>
      <returns>
        <para>The matrix read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadMessage">
      <summary>
        <para>This is a utility function to read a typed network message from the stream.</para>
      </summary>
      <returns>
        <para>The type of the Network Message, must be derived from MessageBase.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkHash128">
      <summary>
        <para>Reads a NetworkHash128 assetId.</para>
      </summary>
      <returns>
        <para>The assetId object read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkId">
      <summary>
        <para>Reads a NetworkInstanceId from the stream.</para>
      </summary>
      <returns>
        <para>The NetworkInstanceId read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadNetworkIdentity">
      <summary>
        <para>Reads a reference to a NetworkIdentity from the stream.</para>
      </summary>
      <returns>
        <para>The NetworkIdentity object read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt32">
      <summary>
        <para>Reads a 32-bit variable-length-encoded value.</para>
      </summary>
      <returns>
        <para>The 32 bit value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPackedUInt64">
      <summary>
        <para>Reads a 64-bit variable-length-encoded value.</para>
      </summary>
      <returns>
        <para>The 64 bit value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadPlane">
      <summary>
        <para>Reads a unity Plane object.</para>
      </summary>
      <returns>
        <para>The plane read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadQuaternion">
      <summary>
        <para>Reads a Unity Quaternion object.</para>
      </summary>
      <returns>
        <para>The quaternion read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRay">
      <summary>
        <para>Reads a Unity Ray object.</para>
      </summary>
      <returns>
        <para>The ray read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadRect">
      <summary>
        <para>Reads a Unity Rect object.</para>
      </summary>
      <returns>
        <para>The rect read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSByte">
      <summary>
        <para>Reads a signed byte from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSceneId">
      <summary>
        <para>Reads a NetworkSceneId from the stream.</para>
      </summary>
      <returns>
        <para>The NetworkSceneId read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadSingle">
      <summary>
        <para>Reads a float from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadString">
      <summary>
        <para>Reads a string from the stream. (max of 32k bytes).</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadTransform">
      <summary>
        <para>Reads a reference to a Transform from the stream.</para>
      </summary>
      <returns>
        <para>The transform object read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt16">
      <summary>
        <para>Reads an unsigned 16 bit integer from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt32">
      <summary>
        <para>Reads an unsigned 32 bit integer from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadUInt64">
      <summary>
        <para>Reads an unsigned 64 bit integer from the stream.</para>
      </summary>
      <returns>
        <para>Value read.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector2">
      <summary>
        <para>Reads a Unity Vector2 object.</para>
      </summary>
      <returns>
        <para>The vector read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector3">
      <summary>
        <para>Reads a Unity Vector3 objects.</para>
      </summary>
      <returns>
        <para>The vector read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ReadVector4">
      <summary>
        <para>Reads a Unity Vector4 object.</para>
      </summary>
      <returns>
        <para>The vector read from the stream.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.SeekZero">
      <summary>
        <para>Sets the current position of the reader's stream to the start of the stream.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkReader.ToString">
      <summary>
        <para>Returns a string representation of the reader's buffer.</para>
      </summary>
      <returns>
        <para>Buffer contents.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSceneId">
      <summary>
        <para>This is used to identify networked objects in a scene. These values are allocated in the editor and are persistent for the lifetime of the object in the scene.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.IsEmpty">
      <summary>
        <para>Returns true if the value is zero. Non-scene objects - ones which are spawned at runtime will have a sceneId of zero.</para>
      </summary>
      <returns>
        <para>True if zero.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkSceneId.ToString">
      <summary>
        <para>Returns a string like SceneId:value.</para>
      </summary>
      <returns>
        <para>String representation of this object.</para>
      </returns>
    </member>
    <member name="P:UnityEngine.Networking.NetworkSceneId.Value">
      <summary>
        <para>The internal value for this object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServer">
      <summary>
        <para>High level network server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.active">
      <summary>
        <para>Checks if the server has been started.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.connections">
      <summary>
        <para>A list of all the current connections from clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.dontListen">
      <summary>
        <para>If you enable this, the server will not listen for incoming connections on the regular network port.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.handlers">
      <summary>
        <para>Dictionary of the message handlers registered with the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.hostTopology">
      <summary>
        <para>The host topology that the server is using.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.listenPort">
      <summary>
        <para>The port that the server is listening on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localClientActive">
      <summary>
        <para>True is a local client is currently active on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.localConnections">
      <summary>
        <para>A list of local connections on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.maxDelay">
      <summary>
        <para>The maximum delay before sending packets on connections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.networkConnectionClass">
      <summary>
        <para>The class to be used when creating new network connections.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.numChannels">
      <summary>
        <para>The number of channels the network is configure with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.objects">
      <summary>
        <para>This is a dictionary of networked objects that have been spawned on the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.sendPeerInfo">
      <summary>
        <para>Setting this true will make the server send peer info to all participants of the network.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.serverHostId">
      <summary>
        <para>The transport layer hostId used by this server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServer.useWebSockets">
      <summary>
        <para>This makes the server listen for WebSockets connections instead of normal transport layer connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddExternalConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This accepts a network connection from another external source and adds it to the server.</para>
      </summary>
      <param name="conn">Network connection to add.</param>
      <returns>
        <para>True if added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddPlayerForConnection">
      <summary>
        <para>When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>
        <para>True if player was added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.AddPlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>When an AddPlayer message handler has received a request from a player, the server calls this to associate the player object with the connection.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>
        <para>True if player was added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.BecomeHost">
      <summary>
        <para>This allows a client that has been disconnected from a server, to become the host of a new version of the game.</para>
      </summary>
      <param name="oldClient">The client that was connected to the old host.</param>
      <param name="port">The port to listen on.</param>
      <param name="matchInfo">Match information (may be null).</param>
      <returns>
        <para>The local client connected to the new host.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearHandlers">
      <summary>
        <para>Clear all registered callback handlers.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearLocalObjects">
      <summary>
        <para>This clears all of the networked objects that the server is aware of. This can be required if a scene change deleted all of the objects without destroying them in the normal manner.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ClearSpawners">
      <summary>
        <para>Clears all registered spawn prefab and spawn handler functions for this server.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>
        <para>This configures the transport layer settings for the server.</para>
      </summary>
      <param name="config">Transport layer confuration object.</param>
      <param name="maxConnections">The maximum number of client connections to allow.</param>
      <param name="topology">Transport layer topology object to use.</param>
      <returns>
        <para>True if successfully configured.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Configure(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This configures the transport layer settings for the server.</para>
      </summary>
      <param name="config">Transport layer confuration object.</param>
      <param name="maxConnections">The maximum number of client connections to allow.</param>
      <param name="topology">Transport layer topology object to use.</param>
      <returns>
        <para>True if successfully configured.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Destroy(UnityEngine.GameObject)">
      <summary>
        <para>Destroys this object and corresponding objects on all clients.</para>
      </summary>
      <param name="obj">Game object to destroy.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DestroyPlayersForConnection(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This destroys all the player objects associated with a NetworkConnections on a server.</para>
      </summary>
      <param name="conn">The connections object to clean up for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.DisconnectAll">
      <summary>
        <para>Disconnect all currently connected clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.FindLocalObject">
      <summary>
        <para>This finds the NetworkIdentity game object that matches a netId.</para>
      </summary>
      <param name="netId">The netId of the NetworkIdentity object to find.</param>
      <returns>
        <para>The game object that matches the netId.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetConnectionStats">
      <summary>
        <para>Gets aggregate packet stats for all connections.</para>
      </summary>
      <returns>
        <para>Dictionary of msg types and packet statistics.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsIn(System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get inbound network statistics for the server.</para>
      </summary>
      <param name="numMsgs">Number of messages received so far.</param>
      <param name="numBytes">Number of bytes received so far.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.GetStatsOut(System.Int32&amp;,System.Int32&amp;,System.Int32&amp;,System.Int32&amp;)">
      <summary>
        <para>Get outbound network statistics for the client.</para>
      </summary>
      <param name="numMsgs">Number of messages sent so far (including collated messages send through buffer).</param>
      <param name="numBufferedMsgs">Number of messages sent through buffer.</param>
      <param name="numBytes">Number of bytes sent so far.</param>
      <param name="lastBufferedPerSecond">Number of messages buffered for sending per second.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.String,System.Int32)">
      <summary>
        <para>Start the server on the given port number. Note that if a match has been created, this will listen using the relay server instead of a local socket.</para>
      </summary>
      <param name="ipAddress">The IP address to bind to (optional).</param>
      <param name="serverPort">Listen port number.</param>
      <returns>
        <para>True if listen succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Listen(System.Int32)">
      <summary>
        <para>Start the server on the given port number. Note that if a match has been created, this will listen using the relay server instead of a local socket.</para>
      </summary>
      <param name="ipAddress">The IP address to bind to (optional).</param>
      <param name="serverPort">Listen port number.</param>
      <returns>
        <para>True if listen succeeded.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>
        <para>Starts a server using a relay server. This is the manual way of using the relay server, as the regular NetworkServer.Connect() will automatically use the relay server if a match exists.</para>
      </summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>Register a handler for a particular message type.</para>
      </summary>
      <param name="msgType">Message type number.</param>
      <param name="handler">Function handler which will be invoked for when this message type is received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.RemoveExternalConnection(System.Int32)">
      <summary>
        <para>This removes an external connection added with AddExternalConnection().</para>
      </summary>
      <param name="connectionId">The id of the connection to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ReplacePlayerForConnection">
      <summary>
        <para>This replaces the player object for a connection with a different player object. The old player object is not destroyed.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>
        <para>True if player was replaced.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ReplacePlayerForConnection(UnityEngine.Networking.NetworkConnection,UnityEngine.GameObject,System.Int16)">
      <summary>
        <para>This replaces the player object for a connection with a different player object. The old player object is not destroyed.</para>
      </summary>
      <param name="conn">Connection which is adding the player.</param>
      <param name="player">Player object spawned for the player.</param>
      <param name="playerControllerId">The player controller ID number as specified by client.</param>
      <returns>
        <para>True if player was replaced.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Reset">
      <summary>
        <para>Reset the NetworkServer singleton.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.ResetConnectionStats">
      <summary>
        <para>Resets the packet stats on all connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToAll(System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>Sends a network message to all connected clients on a specified transport layer QoS channel.</para>
      </summary>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to use.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendByChannelToReady(UnityEngine.GameObject,System.Int16,UnityEngine.Networking.MessageBase,System.Int32)">
      <summary>
        <para>Sends a network message to all connected clients that are "ready" on a specified transport layer QoS channel.</para>
      </summary>
      <param name="contextObj">An object to use for context when calculating object visibility. If null, then the message is sent to all ready clients.</param>
      <param name="msgType">The message id.</param>
      <param name="msg">The message to send.</param>
      <param name="channelId">The transport layer channel to send on.</param>
      <returns>
        <para>True if the message was sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToPlayer(UnityEngine.GameObject,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends an array of bytes to a specific player.</para>
      </summary>
      <param name="player">The player to send he bytes to.</param>
      <param name="buffer">Array of bytes to send.</param>
      <param name="numBytes">Size of array.</param>
      <param name="channelId">Transport layer channel id to send bytes on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendBytesToReady">
      <summary>
        <para>This sends an array of bytes to all ready players.</para>
      </summary>
      <param name="buffer">Array of bytes to send.</param>
      <param name="numBytes">Size of array.</param>
      <param name="channelId">Transport layer channel id to send bytes on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendNetworkInfo(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This sends information about all participants in the current network game to the connection.</para>
      </summary>
      <param name="targetConnection">Connection to send peer info to.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToAll">
      <summary>
        <para>Send a message structure with the given type number to all connected clients.</para>
      </summary>
      <param name="msg">Message structure.</param>
      <param name="msgType">Message type.</param>
      <returns>
        <para>Success if message is sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToClient">
      <summary>
        <para>Send a message to the client which owns the given connection ID.</para>
      </summary>
      <param name="connectionId">Client connection ID.</param>
      <param name="msg">Message struct to send.</param>
      <param name="msgType">Message type.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToClientOfPlayer">
      <summary>
        <para>Send a message to the client which owns the given player object instance.</para>
      </summary>
      <param name="player">The players game object.</param>
      <param name="msg">Message struct.</param>
      <param name="msgType">Message type.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendToReady">
      <summary>
        <para>Send a message structure with the given type number to only clients which are ready.</para>
      </summary>
      <param name="msg">Message structure.</param>
      <param name="msgType">Message type.</param>
      <returns>
        <para>Success if message is sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendUnreliableToAll">
      <summary>
        <para>Send given message structure as an unreliable message to all connected clients.</para>
      </summary>
      <param name="msg">Message structure.</param>
      <param name="msgType">Message type.</param>
      <returns>
        <para>Success if message is sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendUnreliableToReady">
      <summary>
        <para>Send given message structure as an unreliable message only to ready clients.</para>
      </summary>
      <param name="msg">Message structure.</param>
      <param name="msgType">Message type.</param>
      <returns>
        <para>Success if message is sent.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SendWriterToReady">
      <summary>
        <para>Sends the contents of a NetworkWriter object to the ready players.</para>
      </summary>
      <param name="writer">The writer object to send.</param>
      <param name="channelId">The QoS channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetAllClientsNotReady">
      <summary>
        <para>Marks all connected clients as no longer ready.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientNotReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client of the connection to be not-ready.</para>
      </summary>
      <param name="conn">The connection of the client to make not ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetClientReady(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>Sets the client to be ready.</para>
      </summary>
      <param name="conn">The connection of the client to make ready.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class used when creating new network connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Shutdown">
      <summary>
        <para>This shuts down the server and disconnects all clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Spawn(UnityEngine.GameObject)">
      <summary>
        <para>Spawn the given game object on all clients which are ready.</para>
      </summary>
      <param name="obj">Game object with NetworkIdentity to spawn.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.Spawn">
      <summary>
        <para>Spawn the given game object on all clients which are ready.</para>
      </summary>
      <param name="obj">Game object with NetworkIdentity to spawn.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnObjects">
      <summary>
        <para>This causes NetworkIdentity objects in a scene to be spawned on a server.</para>
      </summary>
      <returns>
        <para>Success if objects where spawned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.GameObject)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="player">The player object to set Client Authority to.</param>
      <param name="assetId">The assetId of the object to spawn. Used for custom spawn handlers.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>
        <para>True if the object was spawned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="player">The player object to set Client Authority to.</param>
      <param name="assetId">The assetId of the object to spawn. Used for custom spawn handlers.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>
        <para>True if the object was spawned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.SpawnWithClientAuthority(UnityEngine.GameObject,UnityEngine.Networking.NetworkHash128,UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This spawns an object like NetworkServer.Spawn() but also assigns Client Authority to the specified client.</para>
      </summary>
      <param name="obj">The object to spawn.</param>
      <param name="player">The player object to set Client Authority to.</param>
      <param name="assetId">The assetId of the object to spawn. Used for custom spawn handlers.</param>
      <param name="conn">The connection to set Client Authority to.</param>
      <returns>
        <para>True if the object was spawned.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnregisterHandler(System.Int16)">
      <summary>
        <para>Unregisters a handler for a particular message type.</para>
      </summary>
      <param name="msgType">The message type to remove the handler for.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServer.UnSpawn(UnityEngine.GameObject)">
      <summary>
        <para>This takes an object that has been spawned and un-spawns it.</para>
      </summary>
      <param name="obj">The spawned object to be unspawned.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkServerSimple">
      <summary>
        <para>The NetworkServerSimple is a basic server class without the "game" related functionality that the NetworkServer class has.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.connections">
      <summary>
        <para>A read-only list of the current connections being managed.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.handlers">
      <summary>
        <para>The message handler functions that are registered.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.hostTopology">
      <summary>
        <para>The transport layer host-topology that the server is configured with.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.listenPort">
      <summary>
        <para>The network port that the server is listening on.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.messageBuffer">
      <summary>
        <para>The internal buffer that the server reads data from the network into. This will contain the most recent data read from the network when OnData() is called.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.messageReader">
      <summary>
        <para>A NetworkReader object that is bound to the server's messageBuffer.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.networkConnectionClass">
      <summary>
        <para>The type of class to be created for new network connections from clients.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.serverHostId">
      <summary>
        <para>The transport layer hostId of the server.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkServerSimple.useWebSockets">
      <summary>
        <para>This causes the server to listen for WebSocket connections instead of regular transport layer connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.ClearHandlers">
      <summary>
        <para>Clears the message handlers that are registered.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Configure(UnityEngine.Networking.ConnectionConfig,System.Int32)">
      <summary>
        <para>This configures the network transport layer of the server.</para>
      </summary>
      <param name="config">The transport layer configuration to use.</param>
      <param name="maxConnections">Maximum number of network connections to allow.</param>
      <param name="topology">The transport layer host topology to use.</param>
      <returns>
        <para>True if configured.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Configure(UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This configures the network transport layer of the server.</para>
      </summary>
      <param name="config">The transport layer configuration to use.</param>
      <param name="maxConnections">Maximum number of network connections to allow.</param>
      <param name="topology">The transport layer host topology to use.</param>
      <returns>
        <para>True if configured.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Disconnect(System.Int32)">
      <summary>
        <para>This disconnects the connection of the corresponding connection id.</para>
      </summary>
      <param name="connectionId">The id of the connection to disconnect.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.DisconnectAllConnections">
      <summary>
        <para>This disconnects all of the active connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.FindConnection(System.Int32)">
      <summary>
        <para>This looks up the network connection object for the specified connection Id.</para>
      </summary>
      <param name="connectionId">The connection id to look up.</param>
      <returns>
        <para>A NetworkConnection objects, or null if no connection found.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Initialize">
      <summary>
        <para>Initialization function that is invoked when the server starts listening. This can be overridden to perform custom initialization such as setting the NetworkConnectionClass.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Listen(System.Int32)">
      <summary>
        <para>This starts the server listening for connections on the specified port.</para>
      </summary>
      <param name="serverListenPort">The port to listen on.</param>
      <param name="topology">The transport layer host toplogy to configure with.</param>
      <returns>
        <para>True if able to listen.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Listen(System.Int32,UnityEngine.Networking.HostTopology)">
      <summary>
        <para>This starts the server listening for connections on the specified port.</para>
      </summary>
      <param name="serverListenPort">The port to listen on.</param>
      <param name="topology">The transport layer host toplogy to configure with.</param>
      <returns>
        <para>True if able to listen.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.ListenRelay(System.String,System.Int32,UnityEngine.Networking.Types.NetworkID,UnityEngine.Networking.Types.SourceID,UnityEngine.Networking.Types.NodeID)">
      <summary>
        <para>Starts a server using a relay server. This is the manual way of using the relay server, as the regular NetworkServer.Connect() will automatically use the relay server if a match exists.</para>
      </summary>
      <param name="relayIp">Relay server IP Address.</param>
      <param name="relayPort">Relay server port.</param>
      <param name="netGuid">GUID of the network to create.</param>
      <param name="sourceId">This server's sourceId.</param>
      <param name="nodeId">The node to join the network with.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnConnected(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality for new network connections.</para>
      </summary>
      <param name="conn">The new connection object.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnConnectError(System.Int32,System.Byte)">
      <summary>
        <para>A virtual function that is invoked when there is a connection error.</para>
      </summary>
      <param name="connectionId">The id of the connection with the error.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnData(UnityEngine.Networking.NetworkConnection,System.Int32,System.Int32)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality when data is received for a connection.</para>
      </summary>
      <param name="conn">The connection that data was received on.</param>
      <param name="channelId">The channel that data was received on.</param>
      <param name="receivedSize">The amount of data received.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDataError(UnityEngine.Networking.NetworkConnection,System.Byte)">
      <summary>
        <para>A virtual function that is called when a data error occurs on a connection.</para>
      </summary>
      <param name="conn">The connection object that the error occured on.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDisconnected(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This virtual function can be overridden to perform custom functionality for disconnected network connections.</para>
      </summary>
      <param name="conn"></param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.OnDisconnectError(UnityEngine.Networking.NetworkConnection,System.Byte)">
      <summary>
        <para>A virtual function that is called when a disconnect error happens.</para>
      </summary>
      <param name="conn">The connection object that the error occured on.</param>
      <param name="error">The error code.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.RegisterHandler(System.Int16,UnityEngine.Networking.NetworkMessageDelegate)">
      <summary>
        <para>This registers a handler function for a message Id.</para>
      </summary>
      <param name="msgType">Message Id to register handler for.</param>
      <param name="handler">Handler function.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.RemoveConnectionAtIndex(System.Int32)">
      <summary>
        <para>This removes a connection object from the server's list of connections.</para>
      </summary>
      <param name="connectionId">The id of the connection to remove.</param>
      <returns>
        <para>True if removed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SendBytesTo(System.Int32,System.Byte[],System.Int32,System.Int32)">
      <summary>
        <para>This sends the data in an array of bytes to the connected client.</para>
      </summary>
      <param name="connectionId">The id of the connection to send on.</param>
      <param name="bytes">The data to send.</param>
      <param name="numBytes">The size of the data to send.</param>
      <param name="channelId">The channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SendWriterTo(System.Int32,UnityEngine.Networking.NetworkWriter,System.Int32)">
      <summary>
        <para>This sends the contents of a NetworkWriter object to the connected client.</para>
      </summary>
      <param name="connectionId">The id of the connection to send on.</param>
      <param name="writer">The writer object to send.</param>
      <param name="channelId">The channel to send the data on.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SetConnectionAtIndex(UnityEngine.Networking.NetworkConnection)">
      <summary>
        <para>This adds a connection created by external code to the server's list of connections, at the connection's connectionId index.</para>
      </summary>
      <param name="conn">A new connection object.</param>
      <returns>
        <para>True if added.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.SetNetworkConnectionClass">
      <summary>
        <para>This sets the class that is used when creating new network connections.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Stop">
      <summary>
        <para>This stops a server from listening.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.UnregisterHandler(System.Int16)">
      <summary>
        <para>This unregisters a registered message handler function.</para>
      </summary>
      <param name="msgType">The message id to unregister.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.Update">
      <summary>
        <para>This function pumps the server causing incoming network data to be processed, and pending outgoing data to be sent.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkServerSimple.UpdateConnections">
      <summary>
        <para>This function causes pending outgoing data on connections to be sent, but unlike Update() it works when the server is not listening.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSettingsAttribute">
      <summary>
        <para>This attribute is used to configure the network settings of scripts that are derived from the NetworkBehaviour base class.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.channel">
      <summary>
        <para>The QoS channel to use for updates for this script.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSettingsAttribute.sendInterval">
      <summary>
        <para>The sendInterval control how frequently updates are sent for this script.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkStartPosition">
      <summary>
        <para>This component is used to make a gameObject a starting position for spawning player objects in multiplayer games.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.AddPlayerMessage">
      <summary>
        <para>This is passed to handler funtions registered for the AddPlayer built-in message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgData">
      <summary>
        <para>The extra message data included in the AddPlayerMessage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.msgSize">
      <summary>
        <para>The size of the extra message data included in the AddPlayerMessage.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.AddPlayerMessage.playerControllerId">
      <summary>
        <para>The playerId of the new player.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.EmptyMessage">
      <summary>
        <para>A utility class to send a network message with no contents.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ErrorMessage">
      <summary>
        <para>This is passed to handler functions registered for the SYSTEM_ERROR built-in message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ErrorMessage.errorCode">
      <summary>
        <para>The error code.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.IntegerMessage">
      <summary>
        <para>A utility class to send simple network messages that only contain an integer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.IntegerMessage.value">
      <summary>
        <para>The integer value to serialize.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.NotReadyMessage">
      <summary>
        <para>This is passed to handler funtions registered for the SYSTEM_NOT_READY built-in message.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage">
      <summary>
        <para>Information about a change in authority of a non-player in the same network game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.authorityState">
      <summary>
        <para>The new state of authority for the object referenced by this message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.connectionId">
      <summary>
        <para>The connection Id (on the server) of the peer whose authority is changing for the object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerAuthorityMessage.netId">
      <summary>
        <para>The network id of the object whose authority state changed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoMessage">
      <summary>
        <para>Information about another participant in the same network game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.address">
      <summary>
        <para>The IP address of the peer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.connectionId">
      <summary>
        <para>The id of the NetworkConnection associated with the peer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isHost">
      <summary>
        <para>True if this peer is the host of the network game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.isYou">
      <summary>
        <para>True if the peer if the same as the current client.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.playerIds">
      <summary>
        <para>The players for this peer.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoMessage.port">
      <summary>
        <para>The network port being used by the peer.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer">
      <summary>
        <para>A structure used to identify player object on other peers for host migration.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.netId">
      <summary>
        <para>The networkId of the player object.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerInfoPlayer.playerControllerId">
      <summary>
        <para>The playerControllerId of the player object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.PeerListMessage">
      <summary>
        <para>Internal UNET message for sending information about network peers to clients.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.oldServerConnectionId">
      <summary>
        <para>The connectionId of this client on the old host.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.PeerListMessage.peers">
      <summary>
        <para>The list of participants in a networked game.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReadyMessage">
      <summary>
        <para>This is passed to handler funtions registered for the SYSTEM_READY built-in message.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.ReconnectMessage">
      <summary>
        <para>This network message is used when a client reconnect to the new host of a game.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgData">
      <summary>
        <para>Additional data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.msgSize">
      <summary>
        <para>Size of additional data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.netId">
      <summary>
        <para>The networkId of this player on the old host.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.oldConnectionId">
      <summary>
        <para>This client's connectionId on the old host.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.ReconnectMessage.playerControllerId">
      <summary>
        <para>The playerControllerId of the player that is rejoining.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage">
      <summary>
        <para>This is passed to handler funtions registered for the SYSTEM_REMOVE_PLAYER built-in message.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.RemovePlayerMessage.playerControllerId">
      <summary>
        <para>The player ID of the player object which should be removed.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkSystem.StringMessage">
      <summary>
        <para>This is a utility class for simple network messages that contain only a string.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkSystem.StringMessage.value">
      <summary>
        <para>The string that will be serialized.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform">
      <summary>
        <para>A component to synchronize the position of networked objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.characterContoller">
      <summary>
        <para>Cached CharacterController.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback2D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.clientMoveCallback3D">
      <summary>
        <para>A callback that can be used to validate on the server, the movement of client authoritative objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.grounded">
      <summary>
        <para>Tells the NetworkTransform that it is on a surface (this is the default). </para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateMovement">
      <summary>
        <para>Enables interpolation of the synchronized movement.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.interpolateRotation">
      <summary>
        <para>Enables interpolation of the synchronized rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.lastSyncTime">
      <summary>
        <para>The most recent time when a movement synchronization packet arrived for this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.movementTheshold">
      <summary>
        <para>The distance that an object can move without sending a movement synchronization update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody2D">
      <summary>
        <para>Cached Rigidbody2D.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rigidbody3D">
      <summary>
        <para>Cached Rigidbody.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.rotationSyncCompression">
      <summary>
        <para>How much to compress rotation sync updates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.sendInterval">
      <summary>
        <para>The sendInterval controls how often state updates are sent for this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.snapThreshold">
      <summary>
        <para>If a movement update puts an object further from its current position that this value, it will snap to the position instead of moving smoothly.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.syncRotationAxis">
      <summary>
        <para>Which axis should rotation by synchronized for.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncPosition">
      <summary>
        <para>The target position interpolating towards.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation2D">
      <summary>
        <para>The target rotation interpolating towards.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncRotation3D">
      <summary>
        <para>The target position interpolating towards.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.targetSyncVelocity">
      <summary>
        <para>The velocity send for synchronization.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransform.transformSyncMode">
      <summary>
        <para>What method to use to sync the object's position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.AxisSyncMode">
      <summary>
        <para>An axis or set of axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisX">
      <summary>
        <para>Only x axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXY">
      <summary>
        <para>The x and y axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXYZ">
      <summary>
        <para>The x, y and z axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisXZ">
      <summary>
        <para>The x and z axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisY">
      <summary>
        <para>Only the y axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisYZ">
      <summary>
        <para>The y and z axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.AxisZ">
      <summary>
        <para>Only the z axis.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.AxisSyncMode.None">
      <summary>
        <para>Do not sync.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.ClientMoveCallback2D">
      <summary>
        <para>This is the delegate use for the movement validation callback function clientMoveCallback2D on NetworkTransforms.</para>
      </summary>
      <param name="position">The new position from the client.</param>
      <param name="velocity">The new velocity from the client.</param>
      <param name="rotation">The new rotation from the client.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.ClientMoveCallback3D">
      <summary>
        <para>This is the delegate use for the movement validation callback function clientMoveCallback3D on NetworkTransforms.</para>
      </summary>
      <param name="position">The new position from the client.</param>
      <param name="velocity">The new velocity from the client.</param>
      <param name="rotation">The new rotation from the client.</param>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.CompressionSyncMode">
      <summary>
        <para>How much to compress sync data.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.High">
      <summary>
        <para>High Compression - sacrificing accuracy.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.Low">
      <summary>
        <para>A low amount of compression that preserves accuracy.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.CompressionSyncMode.None">
      <summary>
        <para>Do not compress.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransform.TransformSyncMode">
      <summary>
        <para>How to synchronize an object's position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncCharacterController">
      <summary>
        <para>Sync using the CharacterController component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncNone">
      <summary>
        <para>Dont synchronize.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody2D">
      <summary>
        <para>Sync using the Rigidbody2D component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncRigidbody3D">
      <summary>
        <para>Sync using the Rigidbody component.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.NetworkTransform.TransformSyncMode.SyncTransform">
      <summary>
        <para>Sync using the game object's base transform.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformChild">
      <summary>
        <para>A component to synchronize the position of child transforms of networked objects.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.childIndex">
      <summary>
        <para>A unique Identifier for this NetworkTransformChild component on this root object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.clientMoveCallback3D">
      <summary>
        <para>A callback function to allow server side validation of the movement of the child object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateMovement">
      <summary>
        <para>The rate to interpolate towards the target position.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.interpolateRotation">
      <summary>
        <para>The rate to interpolate to the target rotation.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.lastSyncTime">
      <summary>
        <para>The most recent time when a movement synchronization packet arrived for this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.movementThreshold">
      <summary>
        <para>The distance that an object can move without sending a movement synchronization update.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.rotationSyncCompression">
      <summary>
        <para>How much to compress rotation sync updates.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.sendInterval">
      <summary>
        <para>The sendInterval controls how often state updates are sent for this object.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.syncRotationAxis">
      <summary>
        <para>Which axis should rotation by synchronized for.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.target">
      <summary>
        <para>The child transform to be synchronized.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncPosition">
      <summary>
        <para>The target position interpolating towards.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformChild.targetSyncRotation3D">
      <summary>
        <para>The target rotation interpolating towards.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkTransformVisualizer">
      <summary>
        <para>This is a helper component to help understand and debug networked movement synchronization with the NetworkTransform component.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkTransformVisualizer.visualizerPrefab">
      <summary>
        <para>The prefab to use for the visualization object.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.NetworkWriter">
      <summary>
        <para>General purpose serializer for UNET (for serializing data to byte arrays).</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.AsArray">
      <summary>
        <para>Returns the internal array of bytes the writer is using. This is NOT a copy.</para>
      </summary>
      <returns>
        <para>Internal buffer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.#ctor">
      <summary>
        <para>Creates a new NetworkWriter object.</para>
      </summary>
      <param name="buffer">A buffer to write into. This is not copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.#ctor(System.Byte[])">
      <summary>
        <para>Creates a new NetworkWriter object.</para>
      </summary>
      <param name="buffer">A buffer to write into. This is not copied.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.FinishMessage">
      <summary>
        <para>This fills out the size header of a message begun with StartMessage(), so that it can be send using Send() functions.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.NetworkWriter.Position">
      <summary>
        <para>The current position of the internal buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.SeekZero">
      <summary>
        <para>Seeks to the start of the internal buffer.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.StartMessage(System.Int16)">
      <summary>
        <para>This begins a new message, which should be completed with FinishMessage() once the payload has been written.</para>
      </summary>
      <param name="msgType">Message type.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.ToArray">
      <summary>
        <para>Returns a copy of internal array of bytes the writer is using, it copies only the bytes used.</para>
      </summary>
      <returns>
        <para>Copy of data used by the writer.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.Write(UnityEngine.GameObject)">
      <summary>
        <para>This writes the a reference to a GameObject with a NetworkIdentity component to the stream. The object should have been spawned for clients to know about it.</para>
      </summary>
      <param name="value">The GameObject to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesAndSize(System.Byte[],System.Int32)">
      <summary>
        <para>This writes a 16-bit count and a array of bytes of that length to the stream.</para>
      </summary>
      <param name="buffer">Array of bytes to write.</param>
      <param name="count">Number of bytes from the array to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WriteBytesFull(System.Byte[])">
      <summary>
        <para>This writes a 16-bit count and an array of bytes of that size to the stream.</para>
      </summary>
      <param name="buffer">Bytes to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt32(System.UInt32)">
      <summary>
        <para>This writes the 32-bit value to the stream using variable-length-encoding.</para>
      </summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="M:UnityEngine.Networking.NetworkWriter.WritePackedUInt64(System.UInt64)">
      <summary>
        <para>This writes the 64-bit value to the stream using variable-length-encoding.</para>
      </summary>
      <param name="value">Value to write.</param>
    </member>
    <member name="T:UnityEngine.Networking.PlayerController">
      <summary>
        <para>This represents a networked player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.gameObject">
      <summary>
        <para>The game object for this player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.playerControllerId">
      <summary>
        <para>The local player ID number of this player.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.unetView">
      <summary>
        <para>The NetworkIdentity component of the player.</para>
      </summary>
    </member>
    <member name="P:UnityEngine.Networking.PlayerController.IsValid">
      <summary>
        <para>Checks if this PlayerController has an actual player attached to it.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerController.MaxPlayersPerClient">
      <summary>
        <para>The maximum number of local players that a client connection can have.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.PlayerController.ToString">
      <summary>
        <para>String representation of the player objects state.</para>
      </summary>
      <returns>
        <para>String with the object state.</para>
      </returns>
    </member>
    <member name="T:UnityEngine.Networking.PlayerSpawnMethod">
      <summary>
        <para>Enumeration of methods of where to spawn player objects in multiplayer games.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.Random">
      <summary>
        <para>Spawn players at a randomly chosen starting position.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.PlayerSpawnMethod.RoundRobin">
      <summary>
        <para>Spawn players at the next start position.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.ServerCallbackAttribute">
      <summary>
        <para>A Custom Attribute that can be added to member functions of NetworkBehaviour scripts, to make them only run on servers, but not generate warnings.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SpawnDelegate">
      <summary>
        <para>Signature of spawn functions that are passed to NetworkClient.RegisterSpawnFunction(). This is optional, as in most cases RegisterPrefab will be used instead.</para>
      </summary>
      <param name="position"></param>
      <param name="assetId"></param>
    </member>
    <member name="T:UnityEngine.Networking.SyncEventAttribute">
      <summary>
        <para>This is an attribute that can be put on events in NetworkBehaviour classes to allow them to be invoked on client when the event is called on the sserver.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncEventAttribute.channel">
      <summary>
        <para>The UNET QoS channel that this event should be sent on.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncList`1">
      <summary>
        <para>This is the base class for type-specific SyncList classes.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.Add(T)">
      <summary>
        <para>Same as List:Add() but the item is added on clients.</para>
      </summary>
      <param name="item">Item to add.</param>
    </member>
    <member name="P:UnityEngine.Networking.SyncList_1.Callback">
      <summary>
        <para>The delegate type used for SyncListChanged.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.Clear">
      <summary>
        <para>Same as List:Clear() but the list is cleared on clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.DeserializeItem(UnityEngine.Networking.NetworkReader)">
      <summary>
        <para>This method is used when deserializing SyncList items from a stream.</para>
      </summary>
      <param name="reader">Stream to read from.</param>
      <returns>
        <para>New instance of the SyncList value type.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.Dirty(System.Int32)">
      <summary>
        <para>Marks an item in the list as dirty, so it will be updated on clients.</para>
      </summary>
      <param name="index">Index of item to dirty.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.HandleMsg">
      <summary>
        <para>Internal function used for remote list operations.</para>
      </summary>
      <param name="op">List operation.</param>
      <param name="itemIndex">The index of the item being operated on.</param>
      <param name="item">The item being operated on.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.InitializeBehaviour(UnityEngine.Networking.NetworkBehaviour,System.Int32)">
      <summary>
        <para>Internal function.</para>
      </summary>
      <param name="beh">The behaviour the list belongs to.</param>
      <param name="cmdHash">Identifies this list.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.Insert(System.Int32,T)">
      <summary>
        <para>Same as List::Insert() but also inserts into list on clients.</para>
      </summary>
      <param name="index">Where to insert the item.</param>
      <param name="item">Item to insert.</param>
    </member>
    <member name="T:UnityEngine.Networking.SyncList`1.Operation">
      <summary>
        <para>The types of operations that can occur for SyncLists.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_ADD">
      <summary>
        <para>Item was added to the list.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_CLEAR">
      <summary>
        <para>The list was cleared.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_DIRTY">
      <summary>
        <para>An item in the list was manually marked dirty.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_INSERT">
      <summary>
        <para>An item was inserted into the list.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_REMOVE">
      <summary>
        <para>An item was removed from the list.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_REMOVEAT">
      <summary>
        <para>An item was removed at an index from the list.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncList_1.Operation.OP_SET">
      <summary>
        <para>An item was set to a new value in the list.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.Remove(T)">
      <summary>
        <para>Same as List:Remove except removes on clients also.</para>
      </summary>
      <param name="item">Item to remove.</param>
      <returns>
        <para>Success if removed.</para>
      </returns>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.RemoveAt(System.Int32)">
      <summary>
        <para>Same as List:Remove except it removes the index on clients also.</para>
      </summary>
      <param name="index">Index to remove.</param>
    </member>
    <member name="M:UnityEngine.Networking.SyncList_1.SerializeItem(UnityEngine.Networking.NetworkWriter,T)">
      <summary>
        <para>This is used to write a value object from a SyncList to a stream.</para>
      </summary>
      <param name="writer">Stream to write to.</param>
      <param name="item">Item to write.</param>
    </member>
    <member name="T:UnityEngine.Networking.SyncList_1.SyncListChanged">
      <summary>
        <para>A delegate that can be populated to recieve callbacks when the list changes.</para>
      </summary>
      <param name="op">The operation that occurred.</param>
      <param name="itemIndex">The index of the item that was effected.</param>
    </member>
    <member name="T:UnityEngine.Networking.SyncListBool">
      <summary>
        <para>A list of booleans that will be synchronized from server to clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListBool.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListBool)">
      <summary>
        <para>An internal function used for serializing SyncList member variables.</para>
      </summary>
      <param name="reader"></param>
      <param name="syncList"></param>
    </member>
    <member name="T:UnityEngine.Networking.SyncListFloat">
      <summary>
        <para>A list of floats that will be synchronized from server to clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListFloat.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListFloat)">
      <summary>
        <para>An internal function used for serializing SyncList member variables.</para>
      </summary>
      <param name="reader"></param>
      <param name="syncList"></param>
    </member>
    <member name="T:UnityEngine.Networking.SyncListInt">
      <summary>
        <para>A list of integers that will be synchronized from server to clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListInt.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListInt)">
      <summary>
        <para>An internal function used for serializing SyncList member variables.</para>
      </summary>
      <param name="reader"></param>
      <param name="syncList"></param>
    </member>
    <member name="T:UnityEngine.Networking.SyncListString">
      <summary>
        <para>This is a list of strings that will be synchronized from the server to clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListString.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListString)">
      <summary>
        <para>An internal function used for serializing SyncList member variables.</para>
      </summary>
      <param name="reader"></param>
      <param name="syncList"></param>
    </member>
    <member name="T:UnityEngine.Networking.SyncListStruct`1">
      <summary>
        <para>This class is used for lists of structs that are synchronized from the server to clients.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.SyncListUInt">
      <summary>
        <para>A list of unsigned integers that will be synchronized from server to clients.</para>
      </summary>
    </member>
    <member name="M:UnityEngine.Networking.SyncListUInt.ReadReference(UnityEngine.Networking.NetworkReader,UnityEngine.Networking.SyncListUInt)">
      <summary>
        <para>An internal function used for serializing SyncList member variables.</para>
      </summary>
      <param name="reader"></param>
      <param name="syncList"></param>
    </member>
    <member name="T:UnityEngine.Networking.SyncVarAttribute">
      <summary>
        <para>[SyncVar] is an attribute that can be put on member variables of UNeBehaviour classes. These variables will have their values sychronized from the server to clients in the game that are in the ready state.
</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.SyncVarAttribute.hook">
      <summary>
        <para>The hook attribute can be used to specify a function to be called when the sync var changes value on the client.</para>
      </summary>
    </member>
    <member name="T:UnityEngine.Networking.UnSpawnDelegate">
      <summary>
        <para>Delegate for a function which will handle destruction of objects created with NetworkServer.Spawn.</para>
      </summary>
      <param name="spawned"></param>
    </member>
    <member name="T:UnityEngine.Networking.Version">
      <summary>
        <para>Enumeration of Networking versions.</para>
      </summary>
    </member>
    <member name="F:UnityEngine.Networking.Version.Current">
      <summary>
        <para>The current UNET version.</para>
      </summary>
    </member>
  </members>
</doc>
